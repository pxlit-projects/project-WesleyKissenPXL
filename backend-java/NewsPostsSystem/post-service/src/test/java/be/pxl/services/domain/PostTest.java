package be.pxl.services.domain;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;


class PostTest {

    private UUID postId;
    private String title;
    private String content;
    private String author;
    private LocalDateTime timeOfCreation;
    private Status status;
    private String rejectionReason;

    @BeforeEach
    void setUp() {
        postId = UUID.randomUUID();
        title = "Sample Title";
        content = "Sample Content";
        author = "Sample Author";
        timeOfCreation = LocalDateTime.now();
        status = Status.POSTED;
        rejectionReason = "None";
    }

    @Test
    void testPostConstructorWithAllArgs() {
        // Test All Args Constructor
        Post post = new Post(postId, title, content, author, timeOfCreation, status, rejectionReason);

        assertNotNull(post);
        assertEquals(postId, post.getId());
        assertEquals(title, post.getTitle());
        assertEquals(content, post.getContent());
        assertEquals(author, post.getAuthor());
        assertEquals(timeOfCreation, post.getTimeOfCreation());
        assertEquals(status, post.getStatus());
        assertEquals(rejectionReason, post.getRejectionReason());
    }

    @Test
    void testPostNoArgsConstructor() {
        // Test No Args Constructor
        Post post = new Post();
        post.setId(postId);
        post.setTitle(title);
        post.setContent(content);
        post.setAuthor(author);
        post.setTimeOfCreation(timeOfCreation);
        post.setStatus(status);
        post.setRejectionReason(rejectionReason);

        assertNotNull(post);
        assertEquals(postId, post.getId());
        assertEquals(title, post.getTitle());
        assertEquals(content, post.getContent());
        assertEquals(author, post.getAuthor());
        assertEquals(timeOfCreation, post.getTimeOfCreation());
        assertEquals(status, post.getStatus());
        assertEquals(rejectionReason, post.getRejectionReason());
    }

    @Test
    void testBuilder() {
        // Test Builder Pattern
        Post post = Post.builder()
                .id(postId)
                .title(title)
                .content(content)
                .author(author)
                .timeOfCreation(timeOfCreation)
                .status(status)
                .rejectionReason(rejectionReason)
                .build();

        assertNotNull(post);
        assertEquals(postId, post.getId());
        assertEquals(title, post.getTitle());
        assertEquals(content, post.getContent());
        assertEquals(author, post.getAuthor());
        assertEquals(timeOfCreation, post.getTimeOfCreation());
        assertEquals(status, post.getStatus());
        assertEquals(rejectionReason, post.getRejectionReason());
    }

    @Test
    void testEqualsAndHashCode() {
        // Test Equals and HashCode
        Post post1 = new Post(postId, title, content, author, timeOfCreation, status, rejectionReason);
        Post post2 = new Post(postId, title, content, author, timeOfCreation, status, rejectionReason);
        Post post3 = new Post(UUID.randomUUID(), "Different Title", "Different Content", "Different Author", timeOfCreation, Status.CONCEPT, "Some reason");

        // Test equality
        assertEquals(post1, post2);  // Same values should be equal
        assertNotEquals(post1, post3);  // Different values should not be equal

        // Test hashCode
        assertEquals(post1.hashCode(), post2.hashCode());  // Same values should have the same hashCode
        assertNotEquals(post1.hashCode(), post3.hashCode());  // Different values should have different hashCodes
    }

    @Test
    void testToString() {
        // Test toString() method generated by @Data
        Post post = new Post(postId, title, content, author, timeOfCreation, status, rejectionReason);
        String toString = post.toString();

        assertTrue(toString.contains("Post(id=" + postId));
        assertTrue(toString.contains("title=" + title));
        assertTrue(toString.contains("content=" + content));
        assertTrue(toString.contains("author=" + author));
        assertTrue(toString.contains("timeOfCreation=" + timeOfCreation));
        assertTrue(toString.contains("status=" + status));
        assertTrue(toString.contains("rejectionReason=" + rejectionReason));
    }

    // Optional: Test getters and setters explicitly (if not covered by the other tests)
    @Test
    void testGettersAndSetters() {
        Post post = new Post();
        post.setId(postId);
        post.setTitle(title);
        post.setContent(content);
        post.setAuthor(author);
        post.setTimeOfCreation(timeOfCreation);
        post.setStatus(status);
        post.setRejectionReason(rejectionReason);

        assertEquals(postId, post.getId());
        assertEquals(title, post.getTitle());
        assertEquals(content, post.getContent());
        assertEquals(author, post.getAuthor());
        assertEquals(timeOfCreation, post.getTimeOfCreation());
        assertEquals(status, post.getStatus());
        assertEquals(rejectionReason, post.getRejectionReason());
    }
}
