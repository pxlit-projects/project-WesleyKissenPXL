package be.pxl.services.domain;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

class NotificationTest {

    private UUID notificationId;
    private UUID postId;
    private Status status;

    @BeforeEach
    void setUp() {
        notificationId = UUID.randomUUID();
        postId = UUID.randomUUID();
        status = Status.WAITING_FOR_APPROVEL;  // Assuming Status is an enum like PENDING, APPROVED, etc.
    }

    @Test
    void testNotificationConstructorWithAllArgs() {
        // Test All Args Constructor
        Notification notification = new Notification(notificationId, postId, status);

        assertNotNull(notification);
        assertEquals(notificationId, notification.getId());
        assertEquals(postId, notification.getPostId());
        assertEquals(status, notification.getStatus());
    }

    @Test
    void testNotificationNoArgsConstructor() {
        // Test No Args Constructor
        Notification notification = new Notification();
        notification.setId(notificationId);
        notification.setPostId(postId);
        notification.setStatus(status);

        assertNotNull(notification);
        assertEquals(notificationId, notification.getId());
        assertEquals(postId, notification.getPostId());
        assertEquals(status, notification.getStatus());
    }

    @Test
    void testBuilder() {
        // Test Builder Pattern
        Notification notification = Notification.builder()
                .id(notificationId)
                .postId(postId)
                .status(status)
                .build();

        assertNotNull(notification);
        assertEquals(notificationId, notification.getId());
        assertEquals(postId, notification.getPostId());
        assertEquals(status, notification.getStatus());
    }

    @Test
    void testEqualsAndHashCode() {
        // Test Equals and HashCode
        Notification notification1 = new Notification(notificationId, postId, status);
        Notification notification2 = new Notification(notificationId, postId, status);
        Notification notification3 = new Notification(UUID.randomUUID(), UUID.randomUUID(), Status.POSTED);

        // Test equality
        assertEquals(notification1, notification2);  // Same values should be equal
        assertNotEquals(notification1, notification3);  // Different values should not be equal

        // Test hashCode
        assertEquals(notification1.hashCode(), notification2.hashCode());  // Same values should have the same hashCode
        assertNotEquals(notification1.hashCode(), notification3.hashCode());  // Different values should have different hashCodes
    }

    @Test
    void testToString() {
        // Test toString() method generated by @Data
        Notification notification = new Notification(notificationId, postId, status);
        String toString = notification.toString();

        assertTrue(toString.contains("Notification(id=" + notificationId));
        assertTrue(toString.contains("postId=" + postId));
        assertTrue(toString.contains("status=" + status));
    }

    // Optional: Test getters and setters explicitly (if not covered by the other tests)
    @Test
    void testGettersAndSetters() {
        Notification notification = new Notification();
        notification.setId(notificationId);
        notification.setPostId(postId);
        notification.setStatus(status);

        assertEquals(notificationId, notification.getId());
        assertEquals(postId, notification.getPostId());
        assertEquals(status, notification.getStatus());
    }
}
