{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { ReviewService } from './review.service';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService } from './auth-service.service';\nimport { environment } from 'environments/environment.development';\n// Mock AuthService\nclass MockAuthService {\n  getRole() {\n    return 'gebruiker'; // mock role to simulate a standard user\n  }\n}\ndescribe('ReviewService', () => {\n  let service;\n  let httpMock;\n  let authService;\n  const apiUrl = environment.reviewApiUrl;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ReviewService, {\n        provide: AuthService,\n        useClass: MockAuthService\n      }]\n    });\n    service = TestBed.inject(ReviewService);\n    httpMock = TestBed.inject(HttpTestingController);\n    authService = TestBed.inject(AuthService); // Typecasting to MockAuthService\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  describe('getPostsWaitingForApproval', () => {\n    it('should fetch all posts waiting for approval and return them', () => {\n      const mockPosts = [{\n        id: '1',\n        title: 'Post 1',\n        content: 'Content 1'\n      }, {\n        id: '2',\n        title: 'Post 2',\n        content: 'Content 2'\n      }];\n      service.getPostsWaitingForApproval().subscribe(posts => {\n        expect(posts.length).toBe(2);\n        expect(posts).toEqual(mockPosts);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/getAllReviewablePosts`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPosts);\n    });\n    it('should handle error when fetching posts fails', () => {\n      service.getPostsWaitingForApproval().subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/getAllReviewablePosts`);\n      req.flush('Error', {\n        status: 500,\n        statusText: 'Server Error'\n      });\n    });\n  });\n  describe('publishPost', () => {\n    it('should publish a post successfully', () => {\n      const reviewId = '1';\n      service.publishPost(reviewId).subscribe(response => {\n        expect(response).toBeTruthy();\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/publishReviewPost`);\n      expect(req.request.method).toBe('PUT');\n      req.flush({});\n    });\n    it('should handle error when publishing a post fails', () => {\n      const reviewId = '1';\n      service.publishPost(reviewId).subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/publishReviewPost`);\n      req.flush('Error', {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n  describe('rejectPost', () => {\n    it('should reject a post successfully', () => {\n      const reviewId = '1';\n      const reviewMessage = {\n        message: 'Rejecting this post.'\n      };\n      service.rejectPost(reviewId, reviewMessage).subscribe(response => {\n        expect(response).toBeTruthy();\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/reject`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.body).toEqual(reviewMessage);\n      req.flush({});\n    });\n    it('should handle error when rejecting a post fails', () => {\n      const reviewId = '1';\n      const reviewMessage = {\n        message: 'Rejecting this post.'\n      };\n      service.rejectPost(reviewId, reviewMessage).subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/reject`);\n      req.flush('Error', {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n});","map":{"version":3,"names":["TestBed","ReviewService","HttpClientTestingModule","HttpTestingController","AuthService","environment","MockAuthService","getRole","describe","service","httpMock","authService","apiUrl","reviewApiUrl","beforeEach","configureTestingModule","imports","providers","provide","useClass","inject","afterEach","verify","it","mockPosts","id","title","content","getPostsWaitingForApproval","subscribe","posts","expect","length","toBe","toEqual","req","expectOne","request","method","flush","next","fail","error","status","statusText","reviewId","publishPost","response","toBeTruthy","reviewMessage","message","rejectPost","body"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\shared\\services\\review-service.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { ReviewService } from './review.service';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { AuthService } from './auth-service.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'environments/environment.development';\r\nimport { ReviewablePost } from '@models/review.models';\r\nimport { of } from 'rxjs';\r\n\r\n// Mock AuthService\r\nclass MockAuthService {\r\n  getRole() {\r\n    return 'gebruiker'; // mock role to simulate a standard user\r\n  }\r\n}\r\n\r\ndescribe('ReviewService', () => {\r\n  let service: ReviewService;\r\n  let httpMock: HttpTestingController;\r\n  let authService: MockAuthService;\r\n  const apiUrl = environment.reviewApiUrl;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        ReviewService,\r\n        { provide: AuthService, useClass: MockAuthService },\r\n      ],\r\n    });\r\n\r\n    service = TestBed.inject(ReviewService);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    authService = TestBed.inject(AuthService) as any; // Typecasting to MockAuthService\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  describe('getPostsWaitingForApproval', () => {\r\n    it('should fetch all posts waiting for approval and return them', () => {\r\n      const mockPosts: ReviewablePost[] = [\r\n        { id: '1', title: 'Post 1', content: 'Content 1' },\r\n        { id: '2', title: 'Post 2', content: 'Content 2' },\r\n      ];\r\n\r\n      service.getPostsWaitingForApproval().subscribe((posts) => {\r\n        expect(posts.length).toBe(2);\r\n        expect(posts).toEqual(mockPosts);\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/getAllReviewablePosts`);\r\n      expect(req.request.method).toBe('GET');\r\n      req.flush(mockPosts);\r\n    });\r\n\r\n    it('should handle error when fetching posts fails', () => {\r\n      service.getPostsWaitingForApproval().subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(500);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/getAllReviewablePosts`);\r\n      req.flush('Error', { status: 500, statusText: 'Server Error' });\r\n    });\r\n  });\r\n\r\n  describe('publishPost', () => {\r\n    it('should publish a post successfully', () => {\r\n      const reviewId = '1';\r\n\r\n      service.publishPost(reviewId).subscribe((response) => {\r\n        expect(response).toBeTruthy();\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/publishReviewPost`);\r\n      expect(req.request.method).toBe('PUT');\r\n      req.flush({});\r\n    });\r\n\r\n    it('should handle error when publishing a post fails', () => {\r\n      const reviewId = '1';\r\n\r\n      service.publishPost(reviewId).subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(400);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/publishReviewPost`);\r\n      req.flush('Error', { status: 400, statusText: 'Bad Request' });\r\n    });\r\n  });\r\n\r\n  describe('rejectPost', () => {\r\n    it('should reject a post successfully', () => {\r\n      const reviewId = '1';\r\n      const reviewMessage = { message: 'Rejecting this post.' };\r\n\r\n      service.rejectPost(reviewId, reviewMessage).subscribe((response) => {\r\n        expect(response).toBeTruthy();\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/reject`);\r\n      expect(req.request.method).toBe('PUT');\r\n      expect(req.request.body).toEqual(reviewMessage);\r\n      req.flush({});\r\n    });\r\n\r\n    it('should handle error when rejecting a post fails', () => {\r\n      const reviewId = '1';\r\n      const reviewMessage = { message: 'Rejecting this post.' };\r\n\r\n      service.rejectPost(reviewId, reviewMessage).subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(400);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${reviewId}/reject`);\r\n      req.flush('Error', { status: 400, statusText: 'Bad Request' });\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}