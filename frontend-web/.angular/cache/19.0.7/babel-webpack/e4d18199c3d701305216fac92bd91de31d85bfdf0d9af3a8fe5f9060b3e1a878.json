{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ApprovalComponent } from './approvals.component';\nimport { ReviewService } from '@services/review-service.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\ndescribe('ApprovalComponent', () => {\n  let component;\n  let fixture;\n  let reviewService;\n  let snackBar;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const reviewServiceSpy = jasmine.createSpyObj('ReviewService', ['getPostsWaitingForApproval', 'publishPost', 'rejectPost']);\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    yield TestBed.configureTestingModule({\n      declarations: [ApprovalComponent],\n      providers: [{\n        provide: ReviewService,\n        useValue: reviewServiceSpy\n      }, {\n        provide: MatSnackBar,\n        useValue: snackBarSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(ApprovalComponent);\n    component = fixture.componentInstance;\n    reviewService = TestBed.inject(ReviewService);\n    snackBar = TestBed.inject(MatSnackBar);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call ngOnInit and load concepts', () => {\n    spyOn(component, 'loadConcepts');\n    component.ngOnInit();\n    expect(component.loadConcepts).toHaveBeenCalled();\n  });\n  it('should handle error when loading concepts', fakeAsync(() => {\n    const errorResponse = new Error('Error loading concepts');\n    reviewService.getPostsWaitingForApproval.and.returnValue(throwError(errorResponse));\n    spyOn(console, 'error');\n    component.loadConcepts();\n    tick();\n    expect(reviewService.getPostsWaitingForApproval).toHaveBeenCalled();\n    expect(console.error).toHaveBeenCalledWith('Error loading concepts:', errorResponse);\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","ApprovalComponent","ReviewService","MatSnackBar","Router","throwError","describe","component","fixture","reviewService","snackBar","router","beforeEach","_asyncToGenerator","reviewServiceSpy","jasmine","createSpyObj","snackBarSpy","routerSpy","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","spyOn","ngOnInit","loadConcepts","toHaveBeenCalled","errorResponse","Error","getPostsWaitingForApproval","and","returnValue","console","error","toHaveBeenCalledWith"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\approvalPage\\approvals.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { ApprovalComponent } from './approvals.component';\r\nimport { ReviewService } from '@services/review-service.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\nimport { ReviewablePost } from '@models/review.models';\r\n\r\ndescribe('ApprovalComponent', () => {\r\n  let component: ApprovalComponent;\r\n  let fixture: ComponentFixture<ApprovalComponent>;\r\n  let reviewService: jasmine.SpyObj<ReviewService>;\r\n  let snackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const reviewServiceSpy = jasmine.createSpyObj('ReviewService', [\r\n      'getPostsWaitingForApproval',\r\n      'publishPost',\r\n      'rejectPost',\r\n    ]);\r\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [ApprovalComponent],\r\n      providers: [\r\n        { provide: ReviewService, useValue: reviewServiceSpy },\r\n        { provide: MatSnackBar, useValue: snackBarSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ApprovalComponent);\r\n    component = fixture.componentInstance;\r\n    reviewService = TestBed.inject(ReviewService) as jasmine.SpyObj<ReviewService>;\r\n    snackBar = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call ngOnInit and load concepts', () => {\r\n    spyOn(component, 'loadConcepts');\r\n    component.ngOnInit();\r\n    expect(component.loadConcepts).toHaveBeenCalled();\r\n  });\r\n\r\n\r\n\r\n  it('should handle error when loading concepts', fakeAsync(() => {\r\n    const errorResponse = new Error('Error loading concepts');\r\n    reviewService.getPostsWaitingForApproval.and.returnValue(throwError(errorResponse));\r\n\r\n    spyOn(console, 'error');\r\n    component.loadConcepts();\r\n    tick();\r\n\r\n    expect(reviewService.getPostsWaitingForApproval).toHaveBeenCalled();\r\n    expect(console.error).toHaveBeenCalledWith('Error loading concepts:', errorResponse);\r\n  }));\r\n});"],"mappings":";AAAA,SAASA,OAAO,EAAoBC,SAAS,EAAEC,IAAI,QAAQ,uBAAuB;AAClF,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAAaC,UAAU,QAAQ,MAAM;AAGrCC,QAAQ,CAAC,mBAAmB,EAAE,MAAK;EACjC,IAAIC,SAA4B;EAChC,IAAIC,OAA4C;EAChD,IAAIC,aAA4C;EAChD,IAAIC,QAAqC;EACzC,IAAIC,MAA8B;EAElCC,UAAU,cAAAC,iBAAA,CAAC,aAAW;IACpB,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,YAAY,CAAC,eAAe,EAAE,CAC7D,4BAA4B,EAC5B,aAAa,EACb,YAAY,CACb,CAAC;IACF,MAAMC,WAAW,GAAGF,OAAO,CAACC,YAAY,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC;IACjE,MAAME,SAAS,GAAGH,OAAO,CAACC,YAAY,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,CAAC;IAEnE,MAAMlB,OAAO,CAACqB,sBAAsB,CAAC;MACnCC,YAAY,EAAE,CAACnB,iBAAiB,CAAC;MACjCoB,SAAS,EAAE,CACT;QAAEC,OAAO,EAAEpB,aAAa;QAAEqB,QAAQ,EAAET;MAAgB,CAAE,EACtD;QAAEQ,OAAO,EAAEnB,WAAW;QAAEoB,QAAQ,EAAEN;MAAW,CAAE,EAC/C;QAAEK,OAAO,EAAElB,MAAM;QAAEmB,QAAQ,EAAEL;MAAS,CAAE;KAE3C,CAAC,CAACM,iBAAiB,EAAE;IAEtBhB,OAAO,GAAGV,OAAO,CAAC2B,eAAe,CAACxB,iBAAiB,CAAC;IACpDM,SAAS,GAAGC,OAAO,CAACkB,iBAAiB;IACrCjB,aAAa,GAAGX,OAAO,CAAC6B,MAAM,CAACzB,aAAa,CAAkC;IAC9EQ,QAAQ,GAAGZ,OAAO,CAAC6B,MAAM,CAACxB,WAAW,CAAgC;IACrEQ,MAAM,GAAGb,OAAO,CAAC6B,MAAM,CAACvB,MAAM,CAA2B;IAEzDI,OAAO,CAACoB,aAAa,EAAE;EACzB,CAAC,EAAC;EAEFC,EAAE,CAAC,6BAA6B,EAAE,MAAK;IACrCC,MAAM,CAACvB,SAAS,CAAC,CAACwB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,wCAAwC,EAAE,MAAK;IAChDG,KAAK,CAACzB,SAAS,EAAE,cAAc,CAAC;IAChCA,SAAS,CAAC0B,QAAQ,EAAE;IACpBH,MAAM,CAACvB,SAAS,CAAC2B,YAAY,CAAC,CAACC,gBAAgB,EAAE;EACnD,CAAC,CAAC;EAIFN,EAAE,CAAC,2CAA2C,EAAE9B,SAAS,CAAC,MAAK;IAC7D,MAAMqC,aAAa,GAAG,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IACzD5B,aAAa,CAAC6B,0BAA0B,CAACC,GAAG,CAACC,WAAW,CAACnC,UAAU,CAAC+B,aAAa,CAAC,CAAC;IAEnFJ,KAAK,CAACS,OAAO,EAAE,OAAO,CAAC;IACvBlC,SAAS,CAAC2B,YAAY,EAAE;IACxBlC,IAAI,EAAE;IAEN8B,MAAM,CAACrB,aAAa,CAAC6B,0BAA0B,CAAC,CAACH,gBAAgB,EAAE;IACnEL,MAAM,CAACW,OAAO,CAACC,KAAK,CAAC,CAACC,oBAAoB,CAAC,yBAAyB,EAAEP,aAAa,CAAC;EACtF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}