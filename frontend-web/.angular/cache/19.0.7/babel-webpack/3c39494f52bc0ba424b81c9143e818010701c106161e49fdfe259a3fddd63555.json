{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { LoginComponent } from './login.component';\nimport { AuthService } from '@services/auth-service.service';\nimport { FormsModule } from '@angular/forms';\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let authService;\n  beforeEach(() => {\n    // Create a spy object for AuthService\n    const authSpy = jasmine.createSpyObj('AuthService', ['login']);\n    TestBed.configureTestingModule({\n      imports: [FormsModule, LoginComponent],\n      providers: [{\n        provide: AuthService,\n        useValue: authSpy\n      }],\n      schemas: [NO_ERRORS_SCHEMA] // to avoid issues with unrecognized HTML elements\n    });\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    authService = TestBed.inject(AuthService);\n    fixture.detectChanges();\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call onLogin with valid inputs and succeed', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(true); // Simulating a successful login\n    component.onLogin();\n    expect(component.showerror).toBeFalse();\n    expect(component.errorMessage).toBe('');\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\n  });\n  it('should show an error message when userName or role is missing', () => {\n    component.userName = '';\n    component.role = '';\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Please enter both username and role.');\n  });\n  it('should show an error message when login fails (invalid username or role)', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(false); // Simulating a failed login\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Invalid username or role.');\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\n  });\n  it('should handle missing username', () => {\n    component.userName = '';\n    component.role = 'admin';\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Please enter both username and role.');\n  });\n  it('should handle missing role', () => {\n    component.userName = 'testUser';\n    component.role = '';\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Please enter both username and role.');\n  });\n});","map":{"version":3,"names":["TestBed","LoginComponent","AuthService","FormsModule","NO_ERRORS_SCHEMA","describe","component","fixture","authService","beforeEach","authSpy","jasmine","createSpyObj","configureTestingModule","imports","providers","provide","useValue","schemas","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","userName","role","login","and","returnValue","onLogin","showerror","toBeFalse","errorMessage","toBe","toHaveBeenCalledWith","toBeTrue"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\login\\login.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { LoginComponent } from './login.component';\r\nimport { AuthService } from '@services/auth-service.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n  let authService: jasmine.SpyObj<AuthService>;\r\n\r\n  beforeEach(() => {\r\n    // Create a spy object for AuthService\r\n    const authSpy = jasmine.createSpyObj('AuthService', ['login']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [FormsModule, LoginComponent],\r\n      providers: [{ provide: AuthService, useValue: authSpy }],\r\n      schemas: [NO_ERRORS_SCHEMA], // to avoid issues with unrecognized HTML elements\r\n    });\r\n\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    authService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call onLogin with valid inputs and succeed', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(true); // Simulating a successful login\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeFalse();\r\n    expect(component.errorMessage).toBe('');\r\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\r\n  });\r\n\r\n  it('should show an error message when userName or role is missing', () => {\r\n    component.userName = '';\r\n    component.role = '';\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Please enter both username and role.');\r\n  });\r\n\r\n  it('should show an error message when login fails (invalid username or role)', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(false); // Simulating a failed login\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Invalid username or role.');\r\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\r\n  });\r\n\r\n  it('should handle missing username', () => {\r\n    component.userName = '';\r\n    component.role = 'admin';\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Please enter both username and role.');\r\n  });\r\n\r\n  it('should handle missing role', () => {\r\n    component.userName = 'testUser';\r\n    component.role = '';\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Please enter both username and role.');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}