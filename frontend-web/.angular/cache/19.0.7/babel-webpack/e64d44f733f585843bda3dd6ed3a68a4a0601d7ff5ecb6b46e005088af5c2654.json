{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ConceptComponent } from './../concepts.component';\nimport { Router } from '@angular/router';\nimport { PostService } from '@services/post-service.service';\nimport { throwError } from 'rxjs';\ndescribe('ConceptComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getConceptPosts']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      declarations: [ConceptComponent],\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(ConceptComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call loadConcepts on init', () => {\n    spyOn(component, 'loadConcepts');\n    component.ngOnInit();\n    expect(component.loadConcepts).toHaveBeenCalled();\n  });\n  it('should handle error when loading concepts', fakeAsync(() => {\n    const errorResponse = new Error('Error fetching concepts');\n    postService.getConceptPosts.and.returnValue(throwError(errorResponse));\n    spyOn(console, 'error');\n    component.loadConcepts();\n    tick();\n    expect(postService.getConceptPosts).toHaveBeenCalled();\n    expect(console.error).toHaveBeenCalledWith('Fout bij het laden van concepten:', errorResponse);\n  }));\n  it('should navigate to edit concept page when editConcept is called', () => {\n    const conceptId = '1';\n    component.editConcept(conceptId);\n    expect(router.navigate).toHaveBeenCalledWith([`/concepts/${conceptId}`]);\n  });\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","ConceptComponent","Router","PostService","throwError","describe","component","fixture","postService","router","beforeEach","_asyncToGenerator","postServiceSpy","jasmine","createSpyObj","routerSpy","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","spyOn","ngOnInit","loadConcepts","toHaveBeenCalled","errorResponse","Error","getConceptPosts","and","returnValue","console","error","toHaveBeenCalledWith","conceptId","editConcept","navigate"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\conceptsPage\\editconcept\\edit-concept.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { ConceptComponent } from './../concepts.component';\r\nimport { Router } from '@angular/router';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { of, throwError } from 'rxjs';\r\nimport { By } from '@angular/platform-browser';\r\n\r\ndescribe('ConceptComponent', () => {\r\n  let component: ConceptComponent;\r\n  let fixture: ComponentFixture<ConceptComponent>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getConceptPosts']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [ConceptComponent],\r\n      providers: [\r\n        { provide: PostService, useValue: postServiceSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ConceptComponent);\r\n    component = fixture.componentInstance;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call loadConcepts on init', () => {\r\n    spyOn(component, 'loadConcepts');\r\n    component.ngOnInit();\r\n    expect(component.loadConcepts).toHaveBeenCalled();\r\n  });\r\n\r\n\r\n  it('should handle error when loading concepts', fakeAsync(() => {\r\n    const errorResponse = new Error('Error fetching concepts');\r\n    postService.getConceptPosts.and.returnValue(throwError(errorResponse));\r\n\r\n    spyOn(console, 'error');\r\n    component.loadConcepts();\r\n    tick();\r\n\r\n    expect(postService.getConceptPosts).toHaveBeenCalled();\r\n    expect(console.error).toHaveBeenCalledWith('Fout bij het laden van concepten:', errorResponse);\r\n  }));\r\n\r\n  it('should navigate to edit concept page when editConcept is called', () => {\r\n    const conceptId = '1';\r\n    component.editConcept(conceptId);\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith([`/concepts/${conceptId}`]);\r\n  });\r\n});"],"mappings":";AAAA,SAASA,OAAO,EAAoBC,SAAS,EAAEC,IAAI,QAAQ,uBAAuB;AAClF,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAAaC,UAAU,QAAQ,MAAM;AAGrCC,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAChC,IAAIC,SAA2B;EAC/B,IAAIC,OAA2C;EAC/C,IAAIC,WAAwC;EAC5C,IAAIC,MAA8B;EAElCC,UAAU,cAAAC,iBAAA,CAAC,aAAW;IACpB,MAAMC,cAAc,GAAGC,OAAO,CAACC,YAAY,CAAC,aAAa,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAC/E,MAAMC,SAAS,GAAGF,OAAO,CAACC,YAAY,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC;IAE9D,MAAMhB,OAAO,CAACkB,sBAAsB,CAAC;MACnCC,YAAY,EAAE,CAAChB,gBAAgB,CAAC;MAChCiB,SAAS,EAAE,CACT;QAAEC,OAAO,EAAEhB,WAAW;QAAEiB,QAAQ,EAAER;MAAc,CAAE,EAClD;QAAEO,OAAO,EAAEjB,MAAM;QAAEkB,QAAQ,EAAEL;MAAS,CAAE;KAE3C,CAAC,CAACM,iBAAiB,EAAE;IAEtBd,OAAO,GAAGT,OAAO,CAACwB,eAAe,CAACrB,gBAAgB,CAAC;IACnDK,SAAS,GAAGC,OAAO,CAACgB,iBAAiB;IACrCf,WAAW,GAAGV,OAAO,CAAC0B,MAAM,CAACrB,WAAW,CAAgC;IACxEM,MAAM,GAAGX,OAAO,CAAC0B,MAAM,CAACtB,MAAM,CAA2B;IACzDK,OAAO,CAACkB,aAAa,EAAE;EACzB,CAAC,EAAC;EAEFC,EAAE,CAAC,6BAA6B,EAAE,MAAK;IACrCC,MAAM,CAACrB,SAAS,CAAC,CAACsB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,kCAAkC,EAAE,MAAK;IAC1CG,KAAK,CAACvB,SAAS,EAAE,cAAc,CAAC;IAChCA,SAAS,CAACwB,QAAQ,EAAE;IACpBH,MAAM,CAACrB,SAAS,CAACyB,YAAY,CAAC,CAACC,gBAAgB,EAAE;EACnD,CAAC,CAAC;EAGFN,EAAE,CAAC,2CAA2C,EAAE3B,SAAS,CAAC,MAAK;IAC7D,MAAMkC,aAAa,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC1D1B,WAAW,CAAC2B,eAAe,CAACC,GAAG,CAACC,WAAW,CAACjC,UAAU,CAAC6B,aAAa,CAAC,CAAC;IAEtEJ,KAAK,CAACS,OAAO,EAAE,OAAO,CAAC;IACvBhC,SAAS,CAACyB,YAAY,EAAE;IACxB/B,IAAI,EAAE;IAEN2B,MAAM,CAACnB,WAAW,CAAC2B,eAAe,CAAC,CAACH,gBAAgB,EAAE;IACtDL,MAAM,CAACW,OAAO,CAACC,KAAK,CAAC,CAACC,oBAAoB,CAAC,mCAAmC,EAAEP,aAAa,CAAC;EAChG,CAAC,CAAC,CAAC;EAEHP,EAAE,CAAC,iEAAiE,EAAE,MAAK;IACzE,MAAMe,SAAS,GAAG,GAAG;IACrBnC,SAAS,CAACoC,WAAW,CAACD,SAAS,CAAC;IAEhCd,MAAM,CAAClB,MAAM,CAACkC,QAAQ,CAAC,CAACH,oBAAoB,CAAC,CAAC,aAAaC,SAAS,EAAE,CAAC,CAAC;EAC1E,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}