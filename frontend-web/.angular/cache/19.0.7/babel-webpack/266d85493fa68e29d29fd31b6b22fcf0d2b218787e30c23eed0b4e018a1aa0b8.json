{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CreatePostComponent } from './create-post.component';\ndescribe('CreatePostComponent', () => {\n  let component;\n  let fixture;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, CreatePostComponent] // Voeg de component hier toe aan imports\n    }).compileComponents();\n    fixture = TestBed.createComponent(CreatePostComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create a form with title, content, and author fields', () => {\n    const form = component.postForm;\n    expect(form.contains('title')).toBeTruthy();\n    expect(form.contains('content')).toBeTruthy();\n    expect(form.contains('author')).toBeTruthy();\n  });\n  it('should mark the form as invalid if required fields are empty', () => {\n    component.postForm.setValue({\n      title: '',\n      content: '',\n      author: ''\n    });\n    expect(component.postForm.invalid).toBeTruthy();\n  });\n  it('should mark the form as valid when required fields are filled', () => {\n    component.postForm.setValue({\n      title: 'Test Post',\n      content: 'Test Content',\n      author: 'Test Author'\n    });\n    expect(component.postForm.valid).toBeTruthy();\n  });\n  it('should emit createPost event with correct data on submit', fakeAsync(() => {\n    spyOn(component.createPost, 'emit');\n    component.postForm.setValue({\n      title: 'Test Title',\n      content: 'Test Content',\n      author: 'Test Author'\n    });\n    component.onSubmit();\n    tick();\n    const emittedValue = {\n      title: 'Test Title',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    expect(component.createPost.emit).toHaveBeenCalledWith(emittedValue);\n  }));\n  it('should emit createConceptPost event with correct data when adding as concept', fakeAsync(() => {\n    spyOn(component.createConceptPost, 'emit');\n    component.postForm.setValue({\n      title: 'Test Title',\n      content: 'Test Content',\n      author: 'Test Author'\n    });\n    component.addAsConcept();\n    tick();\n    const emittedValue = {\n      title: 'Test Title',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    expect(component.createConceptPost.emit).toHaveBeenCalledWith(emittedValue);\n  }));\n  it('should call createPost.emit with correct form data when form is valid', fakeAsync(() => {\n    spyOn(component.createPost, 'emit');\n    component.postForm.setValue({\n      title: 'Valid Title',\n      content: 'Valid Content',\n      author: 'Valid Author'\n    });\n    component.onSubmit();\n    tick();\n    expect(component.createPost.emit).toHaveBeenCalledWith({\n      title: 'Valid Title',\n      content: 'Valid Content',\n      author: 'Valid Author'\n    });\n  }));\n  it('should call createConceptPost.emit with correct form data when adding as concept', fakeAsync(() => {\n    spyOn(component.createConceptPost, 'emit');\n    component.postForm.setValue({\n      title: 'Concept Title',\n      content: 'Concept Content',\n      author: 'Concept Author'\n    });\n    component.addAsConcept();\n    tick();\n    expect(component.createConceptPost.emit).toHaveBeenCalledWith({\n      title: 'Concept Title',\n      content: 'Concept Content',\n      author: 'Concept Author'\n    });\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","ReactiveFormsModule","CreatePostComponent","describe","component","fixture","beforeEach","_asyncToGenerator","configureTestingModule","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","form","postForm","contains","setValue","title","content","author","invalid","valid","spyOn","createPost","onSubmit","emittedValue","emit","toHaveBeenCalledWith","createConceptPost","addAsConcept"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\core\\posts\\create-post\\create-post.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CreatePostComponent } from './create-post.component';\r\nimport { PostRequest } from '@models/postRequest.model';\r\n\r\ndescribe('CreatePostComponent', () => {\r\n  let component: CreatePostComponent;\r\n  let fixture: ComponentFixture<CreatePostComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ReactiveFormsModule, CreatePostComponent], // Voeg de component hier toe aan imports\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(CreatePostComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should create a form with title, content, and author fields', () => {\r\n    const form = component.postForm;\r\n    expect(form.contains('title')).toBeTruthy();\r\n    expect(form.contains('content')).toBeTruthy();\r\n    expect(form.contains('author')).toBeTruthy();\r\n  });\r\n\r\n  it('should mark the form as invalid if required fields are empty', () => {\r\n    component.postForm.setValue({ title: '', content: '', author: '' });\r\n    expect(component.postForm.invalid).toBeTruthy();\r\n  });\r\n\r\n  it('should mark the form as valid when required fields are filled', () => {\r\n    component.postForm.setValue({ title: 'Test Post', content: 'Test Content', author: 'Test Author' });\r\n    expect(component.postForm.valid).toBeTruthy();\r\n  });\r\n\r\n  it('should emit createPost event with correct data on submit', fakeAsync(() => {\r\n    spyOn(component.createPost, 'emit');\r\n    component.postForm.setValue({ title: 'Test Title', content: 'Test Content', author: 'Test Author' });\r\n    component.onSubmit();\r\n    tick();\r\n    const emittedValue: PostRequest = { title: 'Test Title', content: 'Test Content', author: 'Test Author' };\r\n    expect(component.createPost.emit).toHaveBeenCalledWith(emittedValue);\r\n  }));\r\n\r\n  it('should emit createConceptPost event with correct data when adding as concept', fakeAsync(() => {\r\n    spyOn(component.createConceptPost, 'emit');\r\n    component.postForm.setValue({ title: 'Test Title', content: 'Test Content', author: 'Test Author' });\r\n    component.addAsConcept();\r\n    tick();\r\n    const emittedValue: PostRequest = { title: 'Test Title', content: 'Test Content', author: 'Test Author' };\r\n    expect(component.createConceptPost.emit).toHaveBeenCalledWith(emittedValue);\r\n  }));\r\n\r\n  it('should call createPost.emit with correct form data when form is valid', fakeAsync(() => {\r\n    spyOn(component.createPost, 'emit');\r\n    component.postForm.setValue({ title: 'Valid Title', content: 'Valid Content', author: 'Valid Author' });\r\n    component.onSubmit();\r\n    tick();\r\n    expect(component.createPost.emit).toHaveBeenCalledWith({\r\n      title: 'Valid Title',\r\n      content: 'Valid Content',\r\n      author: 'Valid Author'\r\n    });\r\n  }));\r\n\r\n  it('should call createConceptPost.emit with correct form data when adding as concept', fakeAsync(() => {\r\n    spyOn(component.createConceptPost, 'emit');\r\n    component.postForm.setValue({ title: 'Concept Title', content: 'Concept Content', author: 'Concept Author' });\r\n    component.addAsConcept();\r\n    tick();\r\n    expect(component.createConceptPost.emit).toHaveBeenCalledWith({\r\n      title: 'Concept Title',\r\n      content: 'Concept Content',\r\n      author: 'Concept Author'\r\n    });\r\n  }));\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}