{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { PostsComponent } from './posts.component';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PostService } from '@services/post-service.service';\nimport { CreatePostComponent } from './create-post/create-post.component';\nimport { of, throwError } from 'rxjs';\ndescribe('PostsComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let snackBar;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['createpost', 'createConceptPost']);\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    yield TestBed.configureTestingModule({\n      imports: [CreatePostComponent],\n      declarations: [PostsComponent],\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: MatSnackBar,\n        useValue: snackBarSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(PostsComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    snackBar = TestBed.inject(MatSnackBar);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call postService.createpost and navigate on success in processAdd', fakeAsync(() => {\n    const post = {\n      title: 'Test Post',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    postService.createpost.and.returnValue(of(null)); // Simulating a successful response\n    spyOn(snackBar, 'open');\n    spyOn(router, 'navigateByUrl');\n    component.processAdd(post);\n    tick();\n    expect(postService.createpost).toHaveBeenCalledWith(post);\n    expect(snackBar.open).toHaveBeenCalledWith('Post Made succesfully!', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  }));\n  it('should show an error snackbar when processAdd fails', fakeAsync(() => {\n    const post = {\n      title: 'Test Post',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    postService.createpost.and.returnValue(throwError('error')); // Simulating an error response\n    spyOn(snackBar, 'open');\n    spyOn(router, 'navigateByUrl');\n    component.processAdd(post);\n    tick();\n    expect(postService.createpost).toHaveBeenCalledWith(post);\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong, try again', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).not.toHaveBeenCalled();\n  }));\n  it('should call postService.createConceptPost and navigate on success in processAddConcept', fakeAsync(() => {\n    const concept = {\n      title: 'Test Concept',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    postService.createConceptPost.and.returnValue(of(null)); // Simulating a successful response\n    spyOn(snackBar, 'open');\n    spyOn(router, 'navigateByUrl');\n    component.processAddConcept(concept);\n    tick();\n    expect(postService.createConceptPost).toHaveBeenCalledWith(concept);\n    expect(snackBar.open).toHaveBeenCalledWith('Concept succesfully saved!', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  }));\n  it('should show an error snackbar when processAddConcept fails', fakeAsync(() => {\n    const concept = {\n      title: 'Test Concept',\n      content: 'Test Content',\n      author: 'Test Author'\n    };\n    postService.createConceptPost.and.returnValue(throwError('error')); // Simulating an error response\n    spyOn(snackBar, 'open');\n    spyOn(router, 'navigateByUrl');\n    component.processAddConcept(concept);\n    tick();\n    expect(postService.createConceptPost).toHaveBeenCalledWith(concept);\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to save the concept', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).not.toHaveBeenCalled();\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","PostsComponent","Router","MatSnackBar","PostService","CreatePostComponent","of","throwError","describe","component","fixture","postService","snackBar","router","beforeEach","_asyncToGenerator","postServiceSpy","jasmine","createSpyObj","snackBarSpy","routerSpy","configureTestingModule","imports","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","post","title","content","author","createpost","and","returnValue","spyOn","processAdd","toHaveBeenCalledWith","open","duration","navigateByUrl","not","toHaveBeenCalled","concept","createConceptPost","processAddConcept"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\core\\posts\\posts.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { PostsComponent } from './posts.component';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { CreatePostComponent } from './create-post/create-post.component';\r\nimport { of, throwError } from 'rxjs';\r\nimport { PostRequest } from '@models/postRequest.model';\r\n\r\ndescribe('PostsComponent', () => {\r\n  let component: PostsComponent;\r\n  let fixture: ComponentFixture<PostsComponent>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n  let snackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['createpost', 'createConceptPost']);\r\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [CreatePostComponent],\r\n      declarations: [PostsComponent],\r\n      providers: [\r\n        { provide: PostService, useValue: postServiceSpy },\r\n        { provide: MatSnackBar, useValue: snackBarSpy },\r\n        { provide: Router, useValue: routerSpy }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PostsComponent);\r\n    component = fixture.componentInstance;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    snackBar = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call postService.createpost and navigate on success in processAdd', fakeAsync(() => {\r\n    const post: PostRequest = { title: 'Test Post', content: 'Test Content', author: 'Test Author' };\r\n    postService.createpost.and.returnValue(of(null));  // Simulating a successful response\r\n    spyOn(snackBar, 'open');\r\n    spyOn(router, 'navigateByUrl');\r\n\r\n    component.processAdd(post);\r\n    tick();\r\n\r\n    expect(postService.createpost).toHaveBeenCalledWith(post);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Post Made succesfully!', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  }));\r\n\r\n  it('should show an error snackbar when processAdd fails', fakeAsync(() => {\r\n    const post: PostRequest = { title: 'Test Post', content: 'Test Content', author: 'Test Author' };\r\n    postService.createpost.and.returnValue(throwError('error'));  // Simulating an error response\r\n    spyOn(snackBar, 'open');\r\n    spyOn(router, 'navigateByUrl');\r\n\r\n    component.processAdd(post);\r\n    tick();\r\n\r\n    expect(postService.createpost).toHaveBeenCalledWith(post);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong, try again', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).not.toHaveBeenCalled();\r\n  }));\r\n\r\n  it('should call postService.createConceptPost and navigate on success in processAddConcept', fakeAsync(() => {\r\n    const concept: PostRequest = { title: 'Test Concept', content: 'Test Content', author: 'Test Author' };\r\n    postService.createConceptPost.and.returnValue(of(null));  // Simulating a successful response\r\n    spyOn(snackBar, 'open');\r\n    spyOn(router, 'navigateByUrl');\r\n\r\n    component.processAddConcept(concept);\r\n    tick();\r\n\r\n    expect(postService.createConceptPost).toHaveBeenCalledWith(concept);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Concept succesfully saved!', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  }));\r\n\r\n  it('should show an error snackbar when processAddConcept fails', fakeAsync(() => {\r\n    const concept: PostRequest = { title: 'Test Concept', content: 'Test Content', author: 'Test Author' };\r\n    postService.createConceptPost.and.returnValue(throwError('error'));  // Simulating an error response\r\n    spyOn(snackBar, 'open');\r\n    spyOn(router, 'navigateByUrl');\r\n\r\n    component.processAddConcept(concept);\r\n    tick();\r\n\r\n    expect(postService.createConceptPost).toHaveBeenCalledWith(concept);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to save the concept', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).not.toHaveBeenCalled();\r\n  }));\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}