{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { LoginComponent } from './login.component';\nimport { AuthService } from '@services/auth-service.service';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let authService;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const authServiceSpy = jasmine.createSpyObj('AuthService', ['login']);\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [FormsModule, ReactiveFormsModule],\n      providers: [{\n        provide: AuthService,\n        useValue: authServiceSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    authService = TestBed.inject(AuthService);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should show error if username or role is missing', () => {\n    component.userName = '';\n    component.role = '';\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Please enter both username and role.');\n  });\n  it('should show error if login fails', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(false); // Simulate a failed login\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Invalid username or role.');\n  });\n  it('should not show error if login is successful', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(true); // Simulate a successful login\n    component.onLogin();\n    expect(component.showerror).toBeFalse();\n    expect(component.errorMessage).toBe('');\n  });\n  it('should call authService.login with username and role', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(true);\n    component.onLogin();\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\n  });\n  it('should show error if login is unsuccessful', () => {\n    component.userName = 'testUser';\n    component.role = 'admin';\n    authService.login.and.returnValue(false);\n    component.onLogin();\n    expect(component.showerror).toBeTrue();\n    expect(component.errorMessage).toBe('Invalid username or role.');\n  });\n});","map":{"version":3,"names":["TestBed","LoginComponent","AuthService","FormsModule","ReactiveFormsModule","describe","component","fixture","authService","beforeEach","_asyncToGenerator","authServiceSpy","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","userName","role","onLogin","showerror","toBeTrue","errorMessage","toBe","login","and","returnValue","toBeFalse","toHaveBeenCalledWith"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\login\\login.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture } from '@angular/core/testing';\r\nimport { LoginComponent } from './login.component';\r\nimport { AuthService } from '@services/auth-service.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n  let authService: jasmine.SpyObj<AuthService>;\r\n\r\n  beforeEach(async () => {\r\n    const authServiceSpy = jasmine.createSpyObj('AuthService', ['login']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [LoginComponent],\r\n      imports: [FormsModule, ReactiveFormsModule],\r\n      providers: [\r\n        { provide: AuthService, useValue: authServiceSpy },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    authService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\r\n\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should show error if username or role is missing', () => {\r\n    component.userName = '';\r\n    component.role = '';\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Please enter both username and role.');\r\n  });\r\n\r\n  it('should show error if login fails', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(false); // Simulate a failed login\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Invalid username or role.');\r\n  });\r\n\r\n  it('should not show error if login is successful', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(true); // Simulate a successful login\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeFalse();\r\n    expect(component.errorMessage).toBe('');\r\n  });\r\n\r\n  it('should call authService.login with username and role', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(true);\r\n\r\n    component.onLogin();\r\n\r\n    expect(authService.login).toHaveBeenCalledWith('testUser', 'admin');\r\n  });\r\n\r\n  it('should show error if login is unsuccessful', () => {\r\n    component.userName = 'testUser';\r\n    component.role = 'admin';\r\n    authService.login.and.returnValue(false);\r\n\r\n    component.onLogin();\r\n\r\n    expect(component.showerror).toBeTrue();\r\n    expect(component.errorMessage).toBe('Invalid username or role.');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}