{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { NotificationsComponent } from './notifications.component';\nimport { PostService } from '@services/post-service.service';\nimport { Router } from '@angular/router';\nimport { of, throwError } from 'rxjs';\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('NotificationsComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let router;\n  beforeEach(() => {\n    // Create spy objects for the PostService and Router\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getNotifications']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    TestBed.configureTestingModule({\n      imports: [NotificationsComponent],\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }],\n      schemas: [NO_ERRORS_SCHEMA] // to avoid errors with unrecognized elements in the template\n    });\n    fixture = TestBed.createComponent(NotificationsComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call loadNotifications on ngOnInit', () => {\n    const loadNotificationsSpy = spyOn(component, 'loadNotifications').and.callThrough();\n    component.ngOnInit();\n    expect(loadNotificationsSpy).toHaveBeenCalled();\n  });\n  it('should load notifications successfully', () => {\n    const mockNotifications = [{\n      postId: \"1\",\n      status: 'REJECTED',\n      id: \"12\",\n      postTitle: \"title\",\n      rejectionReason: \"rejection reason\"\n    }, {\n      postId: \"2\",\n      status: 'APPROVED',\n      id: \"21\",\n      postTitle: \"title\",\n      rejectionReason: \"rejection reason\"\n    }];\n    // Ensure the mock service returns an observable\n    postService.getNotifications.and.returnValue(of(mockNotifications));\n    component.loadNotifications(); // Call the method that should trigger the observable\n    fixture.detectChanges(); // Detect changes after method execution\n    expect(component.notifications).toEqual(mockNotifications); // Verify the result\n  });\n  it('should handle error when loading notifications', () => {\n    const errorResponse = 'Error loading notifications';\n    postService.getNotifications.and.returnValue(throwError(errorResponse));\n    spyOn(console, 'error'); // to spy on console.error\n    component.loadNotifications();\n    expect(console.error).toHaveBeenCalledWith('Error loading notifications:', errorResponse);\n  });\n  it('should navigate to the notification details page if status is REJECTED', () => {\n    const mockNotification = {\n      postId: \"1\",\n      status: 'REJECTED',\n      id: \"12\",\n      postTitle: \"title\",\n      rejectionReason: \"rejection reason\"\n    };\n    component.handleNotificationClick(mockNotification);\n    expect(router.navigate).toHaveBeenCalledWith(['/notifications/1']);\n  });\n  it('should not navigate if the notification status is not REJECTED', () => {\n    const mockNotification = {\n      postId: \"1\",\n      status: 'APPROVED',\n      id: \"12\",\n      postTitle: \"title\",\n      rejectionReason: \"rejection reason\"\n    };\n    component.handleNotificationClick(mockNotification);\n    expect(router.navigate).not.toHaveBeenCalled();\n  });\n});","map":{"version":3,"names":["TestBed","NotificationsComponent","PostService","Router","of","throwError","NO_ERRORS_SCHEMA","describe","component","fixture","postService","router","beforeEach","postServiceSpy","jasmine","createSpyObj","routerSpy","configureTestingModule","imports","providers","provide","useValue","schemas","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","loadNotificationsSpy","spyOn","and","callThrough","ngOnInit","toHaveBeenCalled","mockNotifications","postId","status","id","postTitle","rejectionReason","getNotifications","returnValue","loadNotifications","notifications","toEqual","errorResponse","console","error","toHaveBeenCalledWith","mockNotification","handleNotificationClick","navigate","not"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\notificationPage\\notification.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { NotificationsComponent } from './notifications.component';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { Router } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\nimport { Notificatie } from '@models/notificatie.model';\r\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\r\n\r\ndescribe('NotificationsComponent', () => {\r\n  let component: NotificationsComponent;\r\n  let fixture: ComponentFixture<NotificationsComponent>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(() => {\r\n    // Create spy objects for the PostService and Router\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getNotifications']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [NotificationsComponent],\r\n      providers: [\r\n        { provide: PostService, useValue: postServiceSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n      ],\r\n      schemas: [NO_ERRORS_SCHEMA], // to avoid errors with unrecognized elements in the template\r\n    });\r\n\r\n    fixture = TestBed.createComponent(NotificationsComponent);\r\n    component = fixture.componentInstance;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call loadNotifications on ngOnInit', () => {\r\n    const loadNotificationsSpy = spyOn(component, 'loadNotifications').and.callThrough();\r\n    component.ngOnInit();\r\n    expect(loadNotificationsSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should load notifications successfully', () => {\r\n    const mockNotifications: Notificatie[] = [\r\n      { postId: \"1\", status: 'REJECTED', id: \"12\", postTitle: \"title\", rejectionReason: \"rejection reason\" },\r\n      { postId: \"2\", status: 'APPROVED', id: \"21\", postTitle: \"title\", rejectionReason: \"rejection reason\" }\r\n    ];\r\n  \r\n    // Ensure the mock service returns an observable\r\n    postService.getNotifications.and.returnValue(of(mockNotifications));\r\n  \r\n    component.loadNotifications(); // Call the method that should trigger the observable\r\n  \r\n    fixture.detectChanges(); // Detect changes after method execution\r\n  \r\n    expect(component.notifications).toEqual(mockNotifications); // Verify the result\r\n  });\r\n\r\n  it('should handle error when loading notifications', () => {\r\n    const errorResponse = 'Error loading notifications';\r\n    postService.getNotifications.and.returnValue(throwError(errorResponse));\r\n\r\n    spyOn(console, 'error'); // to spy on console.error\r\n    component.loadNotifications();\r\n\r\n    expect(console.error).toHaveBeenCalledWith('Error loading notifications:', errorResponse);\r\n  });\r\n\r\n  it('should navigate to the notification details page if status is REJECTED', () => {\r\n    const mockNotification: Notificatie = { postId: \"1\", status: 'REJECTED', id: \"12\", postTitle: \"title\", rejectionReason: \"rejection reason\"};\r\n\r\n    component.handleNotificationClick(mockNotification);\r\n\r\n    expect(router.navigate).toHaveBeenCalledWith(['/notifications/1']);\r\n  });\r\n\r\n  it('should not navigate if the notification status is not REJECTED', () => {\r\n    const mockNotification: Notificatie = { postId: \"1\", status: 'APPROVED', id: \"12\", postTitle: \"title\", rejectionReason: \"rejection reason\" };\r\n\r\n    component.handleNotificationClick(mockNotification);\r\n\r\n    expect(router.navigate).not.toHaveBeenCalled();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}