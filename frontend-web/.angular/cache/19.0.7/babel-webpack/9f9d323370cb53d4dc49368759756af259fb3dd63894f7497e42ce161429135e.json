{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { EditNotificationComponent } from './edit-notification.component';\nimport { PostService } from '@services/post-service.service';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { of, throwError } from 'rxjs';\ndescribe('EditNotificationComponent', () => {\n  let component;\n  let fixture;\n  let mockPostService;\n  let mockRouter;\n  let mockSnackBar;\n  let mockActivatedRoute;\n  beforeEach(() => {\n    mockPostService = jasmine.createSpyObj('PostService', ['getConceptById', 'publishConcept']);\n    mockRouter = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    mockSnackBar = jasmine.createSpyObj('MatSnackBar', ['open']);\n    mockActivatedRoute = jasmine.createSpyObj('ActivatedRoute', ['snapshot'], {\n      snapshot: {\n        params: {\n          id: '123'\n        }\n      }\n    });\n    TestBed.configureTestingModule({\n      declarations: [EditNotificationComponent],\n      providers: [{\n        provide: PostService,\n        useValue: mockPostService\n      }, {\n        provide: Router,\n        useValue: mockRouter\n      }, {\n        provide: MatSnackBar,\n        useValue: mockSnackBar\n      }, {\n        provide: ActivatedRoute,\n        useValue: mockActivatedRoute\n      }]\n    });\n    fixture = TestBed.createComponent(EditNotificationComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should initialize conceptId from route params on ngOnInit', () => {\n    component.ngOnInit();\n    expect(component.conceptId).toBe('123');\n  });\n  it('should load concept data on ngOnInit', () => {\n    const mockConcept = {\n      title: 'Title',\n      author: 'Author',\n      content: 'Content'\n    };\n    mockPostService.getConceptById.and.returnValue(of(mockConcept));\n    component.ngOnInit();\n    fixture.detectChanges();\n    expect(component.concept).toEqual(mockConcept);\n  });\n  it('should log error when loading concept fails', () => {\n    spyOn(console, 'error');\n    mockPostService.getConceptById.and.returnValue(throwError(() => new Error('Error loading concept')));\n    component.loadNotificationPost();\n    expect(console.error).toHaveBeenCalledWith('Fout bij het laden van het concept:', jasmine.any(Error));\n  });\n  it('should call publish and navigate on success', () => {\n    const mockConcept = {\n      title: 'Title',\n      author: 'Author',\n      content: 'Content'\n    };\n    component.concept = mockConcept;\n    mockPostService.publishConcept.and.returnValue(of(null));\n    component.publish();\n    fixture.detectChanges();\n    expect(mockPostService.publishConcept).toHaveBeenCalledWith('123', mockConcept);\n    expect(mockSnackBar.open).toHaveBeenCalledWith('Concept emited successfully!', 'Close', {\n      duration: 3000\n    });\n    expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  });\n  it('should show an error snackBar on publish failure', () => {\n    const mockConcept = {\n      title: 'Title',\n      author: 'Author',\n      content: 'Content'\n    };\n    component.concept = mockConcept;\n    mockPostService.publishConcept.and.returnValue(throwError(() => new Error('Error publishing concept')));\n    component.publish();\n    fixture.detectChanges();\n    expect(mockSnackBar.open).toHaveBeenCalledWith('Something went wrong when trying to publish the concept', 'Close', {\n      duration: 3000\n    });\n  });\n  it('should handle undefined conceptId', () => {\n    mockActivatedRoute.snapshot.params['id'] = undefined;\n    component.ngOnInit();\n    expect(component.conceptId).toBeUndefined();\n  });\n});","map":{"version":3,"names":["TestBed","EditNotificationComponent","PostService","Router","ActivatedRoute","MatSnackBar","of","throwError","describe","component","fixture","mockPostService","mockRouter","mockSnackBar","mockActivatedRoute","beforeEach","jasmine","createSpyObj","snapshot","params","id","configureTestingModule","declarations","providers","provide","useValue","createComponent","componentInstance","it","expect","toBeTruthy","ngOnInit","conceptId","toBe","mockConcept","title","author","content","getConceptById","and","returnValue","detectChanges","concept","toEqual","spyOn","console","Error","loadNotificationPost","error","toHaveBeenCalledWith","any","publishConcept","publish","open","duration","navigateByUrl","undefined","toBeUndefined"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\notificationPage\\edit-notification\\edit-notification.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { EditNotificationComponent } from './edit-notification.component';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { Router } from '@angular/router';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { of, throwError } from 'rxjs';\r\nimport { UpdatePostRequest } from '@models/updatePostRequest.model';\r\n\r\ndescribe('EditNotificationComponent', () => {\r\n  let component: EditNotificationComponent;\r\n  let fixture: ComponentFixture<EditNotificationComponent>;\r\n  let mockPostService: jasmine.SpyObj<PostService>;\r\n  let mockRouter: jasmine.SpyObj<Router>;\r\n  let mockSnackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let mockActivatedRoute: jasmine.SpyObj<ActivatedRoute>;\r\n\r\n  beforeEach(() => {\r\n    mockPostService = jasmine.createSpyObj('PostService', ['getConceptById', 'publishConcept']);\r\n    mockRouter = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n    mockSnackBar = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n    mockActivatedRoute = jasmine.createSpyObj('ActivatedRoute', ['snapshot'], {\r\n      snapshot: { params: { id: '123' } },\r\n    });\r\n\r\n    TestBed.configureTestingModule({\r\n      declarations: [EditNotificationComponent],\r\n      providers: [\r\n        { provide: PostService, useValue: mockPostService },\r\n        { provide: Router, useValue: mockRouter },\r\n        { provide: MatSnackBar, useValue: mockSnackBar },\r\n        { provide: ActivatedRoute, useValue: mockActivatedRoute },\r\n      ],\r\n    });\r\n\r\n    fixture = TestBed.createComponent(EditNotificationComponent);\r\n    component = fixture.componentInstance;\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should initialize conceptId from route params on ngOnInit', () => {\r\n    component.ngOnInit();\r\n    expect(component.conceptId).toBe('123');\r\n  });\r\n\r\n  it('should load concept data on ngOnInit', () => {\r\n    const mockConcept: UpdatePostRequest = { title: 'Title', author: 'Author', content: 'Content' };\r\n    mockPostService.getConceptById.and.returnValue(of(mockConcept));\r\n\r\n    component.ngOnInit();\r\n    fixture.detectChanges();\r\n\r\n    expect(component.concept).toEqual(mockConcept);\r\n  });\r\n\r\n  it('should log error when loading concept fails', () => {\r\n    spyOn(console, 'error');\r\n    mockPostService.getConceptById.and.returnValue(throwError(() => new Error('Error loading concept')));\r\n\r\n    component.loadNotificationPost();\r\n\r\n    expect(console.error).toHaveBeenCalledWith('Fout bij het laden van het concept:', jasmine.any(Error));\r\n  });\r\n\r\n  it('should call publish and navigate on success', () => {\r\n    const mockConcept: UpdatePostRequest = { title: 'Title', author: 'Author', content: 'Content' };\r\n    component.concept = mockConcept;\r\n\r\n    mockPostService.publishConcept.and.returnValue(of(null));\r\n\r\n    component.publish();\r\n    fixture.detectChanges();\r\n\r\n    expect(mockPostService.publishConcept).toHaveBeenCalledWith('123', mockConcept);\r\n    expect(mockSnackBar.open).toHaveBeenCalledWith('Concept emited successfully!', 'Close', { duration: 3000 });\r\n    expect(mockRouter.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  });\r\n\r\n  it('should show an error snackBar on publish failure', () => {\r\n    const mockConcept: UpdatePostRequest = { title: 'Title', author: 'Author', content: 'Content' };\r\n    component.concept = mockConcept;\r\n\r\n    mockPostService.publishConcept.and.returnValue(throwError(() => new Error('Error publishing concept')));\r\n\r\n    component.publish();\r\n    fixture.detectChanges();\r\n\r\n    expect(mockSnackBar.open).toHaveBeenCalledWith('Something went wrong when trying to publish the concept', 'Close', { duration: 3000 });\r\n  });\r\n\r\n  it('should handle undefined conceptId', () => {\r\n    mockActivatedRoute.snapshot.params['id'] = undefined;\r\n    component.ngOnInit();\r\n    expect(component.conceptId).toBeUndefined();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}