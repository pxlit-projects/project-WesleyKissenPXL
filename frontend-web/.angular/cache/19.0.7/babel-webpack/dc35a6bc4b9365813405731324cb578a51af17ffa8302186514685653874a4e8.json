{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ApprovalComponent } from './approvals.component';\nimport { ReviewService } from '@services/review-service.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { of, throwError } from 'rxjs';\ndescribe('ApprovalComponent', () => {\n  let component;\n  let fixture;\n  let reviewService;\n  let snackBar;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const reviewServiceSpy = jasmine.createSpyObj('ReviewService', ['getPostsWaitingForApproval', 'publishPost', 'rejectPost']);\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    yield TestBed.configureTestingModule({\n      declarations: [ApprovalComponent],\n      providers: [{\n        provide: ReviewService,\n        useValue: reviewServiceSpy\n      }, {\n        provide: MatSnackBar,\n        useValue: snackBarSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(ApprovalComponent);\n    component = fixture.componentInstance;\n    reviewService = TestBed.inject(ReviewService);\n    snackBar = TestBed.inject(MatSnackBar);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call ngOnInit and load concepts', () => {\n    spyOn(component, 'loadConcepts');\n    component.ngOnInit();\n    expect(component.loadConcepts).toHaveBeenCalled();\n  });\n  it('should handle error when loading concepts', fakeAsync(() => {\n    const errorResponse = new Error('Error loading concepts');\n    reviewService.getPostsWaitingForApproval.and.returnValue(throwError(errorResponse));\n    spyOn(console, 'error');\n    component.loadConcepts();\n    tick();\n    expect(reviewService.getPostsWaitingForApproval).toHaveBeenCalled();\n    expect(console.error).toHaveBeenCalledWith('Error loading concepts:', errorResponse);\n  }));\n  it('should handle review change', () => {\n    component.reviewData = {\n      '1': {\n        accepted: true,\n        rejectionMessage: ''\n      }\n    };\n    component.handleReviewChange('1', false);\n    expect(component.reviewData['1'].accepted).toBeFalse();\n    expect(component.reviewData['1'].rejectionMessage).toBe('');\n    component.handleReviewChange('1', true);\n    expect(component.reviewData['1'].accepted).toBeTrue();\n    expect(component.reviewData['1'].rejectionMessage).toBe('');\n  });\n  it('should publish post successfully', fakeAsync(() => {\n    reviewService.publishPost.and.returnValue(of(null)); // Simulating successful publish\n    component.PublishPost('1');\n    tick(); // Simulate async passage of time\n    expect(reviewService.publishPost).toHaveBeenCalledWith('1');\n    expect(snackBar.open).toHaveBeenCalledWith('Post succesfully published!', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  }));\n  it('should handle error when publishing post', fakeAsync(() => {\n    const errorResponse = new Error('Error publishing post');\n    reviewService.publishPost.and.returnValue(throwError(errorResponse));\n    component.PublishPost('1');\n    tick();\n    expect(reviewService.publishPost).toHaveBeenCalledWith('1');\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to publish the post', 'Close', {\n      duration: 3000\n    });\n  }));\n  it('should handle error when rejecting post', fakeAsync(() => {\n    const errorResponse = new Error('Error rejecting post');\n    reviewService.rejectPost.and.returnValue(throwError(errorResponse));\n    component.RejectPost('1');\n    tick();\n    expect(reviewService.rejectPost).toHaveBeenCalledWith('1', {\n      message: component.reviewData['1'].rejectionMessage\n    });\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to reject the post', 'Close', {\n      duration: 3000\n    });\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","ApprovalComponent","ReviewService","MatSnackBar","Router","of","throwError","describe","component","fixture","reviewService","snackBar","router","beforeEach","_asyncToGenerator","reviewServiceSpy","jasmine","createSpyObj","snackBarSpy","routerSpy","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","spyOn","ngOnInit","loadConcepts","toHaveBeenCalled","errorResponse","Error","getPostsWaitingForApproval","and","returnValue","console","error","toHaveBeenCalledWith","reviewData","accepted","rejectionMessage","handleReviewChange","toBeFalse","toBe","toBeTrue","publishPost","PublishPost","open","duration","navigateByUrl","rejectPost","RejectPost","message"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\approvalPage\\approvals.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { ApprovalComponent } from './approvals.component';\r\nimport { ReviewService } from '@services/review-service.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\nimport { ReviewablePost } from '@models/review.models';\r\n\r\ndescribe('ApprovalComponent', () => {\r\n  let component: ApprovalComponent;\r\n  let fixture: ComponentFixture<ApprovalComponent>;\r\n  let reviewService: jasmine.SpyObj<ReviewService>;\r\n  let snackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const reviewServiceSpy = jasmine.createSpyObj('ReviewService', [\r\n      'getPostsWaitingForApproval',\r\n      'publishPost',\r\n      'rejectPost',\r\n    ]);\r\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [ApprovalComponent],\r\n      providers: [\r\n        { provide: ReviewService, useValue: reviewServiceSpy },\r\n        { provide: MatSnackBar, useValue: snackBarSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ApprovalComponent);\r\n    component = fixture.componentInstance;\r\n    reviewService = TestBed.inject(ReviewService) as jasmine.SpyObj<ReviewService>;\r\n    snackBar = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call ngOnInit and load concepts', () => {\r\n    spyOn(component, 'loadConcepts');\r\n    component.ngOnInit();\r\n    expect(component.loadConcepts).toHaveBeenCalled();\r\n  });\r\n\r\n\r\n\r\n  it('should handle error when loading concepts', fakeAsync(() => {\r\n    const errorResponse = new Error('Error loading concepts');\r\n    reviewService.getPostsWaitingForApproval.and.returnValue(throwError(errorResponse));\r\n\r\n    spyOn(console, 'error');\r\n    component.loadConcepts();\r\n    tick();\r\n\r\n    expect(reviewService.getPostsWaitingForApproval).toHaveBeenCalled();\r\n    expect(console.error).toHaveBeenCalledWith('Error loading concepts:', errorResponse);\r\n  }));\r\n\r\n  \r\n\r\n  it('should handle review change', () => {\r\n    component.reviewData = {\r\n      '1': { accepted: true, rejectionMessage: '' },\r\n    };\r\n\r\n    component.handleReviewChange('1', false);\r\n    expect(component.reviewData['1'].accepted).toBeFalse();\r\n    expect(component.reviewData['1'].rejectionMessage).toBe('');\r\n\r\n    component.handleReviewChange('1', true);\r\n    expect(component.reviewData['1'].accepted).toBeTrue();\r\n    expect(component.reviewData['1'].rejectionMessage).toBe('');\r\n  });\r\n\r\n  it('should publish post successfully', fakeAsync(() => {\r\n    reviewService.publishPost.and.returnValue(of(null)); // Simulating successful publish\r\n\r\n    component.PublishPost('1');\r\n    tick(); // Simulate async passage of time\r\n\r\n    expect(reviewService.publishPost).toHaveBeenCalledWith('1');\r\n    expect(snackBar.open).toHaveBeenCalledWith('Post succesfully published!', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  }));\r\n\r\n  it('should handle error when publishing post', fakeAsync(() => {\r\n    const errorResponse = new Error('Error publishing post');\r\n    reviewService.publishPost.and.returnValue(throwError(errorResponse));\r\n\r\n    component.PublishPost('1');\r\n    tick();\r\n\r\n    expect(reviewService.publishPost).toHaveBeenCalledWith('1');\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to publish the post', 'Close', {\r\n      duration: 3000,\r\n    });\r\n  }));\r\n\r\n\r\n  it('should handle error when rejecting post', fakeAsync(() => {\r\n    const errorResponse = new Error('Error rejecting post');\r\n    reviewService.rejectPost.and.returnValue(throwError(errorResponse));\r\n\r\n    component.RejectPost('1');\r\n    tick();\r\n\r\n    expect(reviewService.rejectPost).toHaveBeenCalledWith('1', { message: component.reviewData['1'].rejectionMessage });\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to reject the post', 'Close', {\r\n      duration: 3000,\r\n    });\r\n  }));\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}