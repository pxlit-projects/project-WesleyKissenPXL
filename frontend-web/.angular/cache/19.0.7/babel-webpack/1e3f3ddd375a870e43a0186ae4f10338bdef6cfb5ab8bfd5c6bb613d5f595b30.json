{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { of, throwError } from 'rxjs';\nimport { ConceptComponent } from './concepts.component';\nimport { PostService } from '@services/post-service.service';\ndescribe('ConceptComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getConceptPosts']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      imports: [ConceptComponent],\n      // Voeg het component toe aan imports\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(ConceptComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    router = TestBed.inject(Router);\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('loadConcepts', () => {\n    it('should load concepts and assign them to the component', () => {\n      const mockConcepts = [{\n        id: '1',\n        title: 'Concept 1',\n        content: 'Content 1',\n        author: 'Author 1',\n        timeOfCreation: new Date(),\n        status: 'CONCEPT'\n      }];\n      postService.getConceptPosts.and.returnValue(of(mockConcepts));\n      component.loadConcepts();\n      expect(postService.getConceptPosts).toHaveBeenCalled();\n      expect(component.concepts).toEqual(mockConcepts);\n    });\n    it('should handle errors when loading concepts', () => {\n      const error = 'Error loading concepts';\n      postService.getConceptPosts.and.returnValue(throwError(error));\n      spyOn(console, 'error');\n      component.loadConcepts();\n      expect(postService.getConceptPosts).toHaveBeenCalled();\n      expect(component.concepts).toEqual([]);\n      expect(console.error).toHaveBeenCalledWith('Fout bij het laden van concepten:', error);\n    });\n  });\n  describe('editConcept', () => {\n    it('should navigate to the edit concept page with the correct ID', () => {\n      const conceptId = '123';\n      component.editConcept(conceptId);\n      expect(router.navigate).toHaveBeenCalledWith([`/concepts/${conceptId}`]);\n    });\n  });\n});","map":{"version":3,"names":["TestBed","Router","of","throwError","ConceptComponent","PostService","describe","component","fixture","postService","router","beforeEach","_asyncToGenerator","postServiceSpy","jasmine","createSpyObj","routerSpy","configureTestingModule","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","it","expect","toBeTruthy","mockConcepts","id","title","content","author","timeOfCreation","Date","status","getConceptPosts","and","returnValue","loadConcepts","toHaveBeenCalled","concepts","toEqual","error","spyOn","console","toHaveBeenCalledWith","conceptId","editConcept","navigate"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\conceptsPage\\concepts.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\nimport { ConceptComponent } from './concepts.component';\r\nimport { PostService } from '@services/post-service.service';\r\n\r\ndescribe('ConceptComponent', () => {\r\n  let component: ConceptComponent;\r\n  let fixture: ComponentFixture<ConceptComponent>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getConceptPosts']);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [ConceptComponent], // Voeg het component toe aan imports\r\n      providers: [\r\n        { provide: PostService, useValue: postServiceSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ConceptComponent);\r\n    component = fixture.componentInstance;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  describe('loadConcepts', () => {\r\n    it('should load concepts and assign them to the component', () => {\r\n      const mockConcepts = [\r\n        {\r\n          id: '1',\r\n          title: 'Concept 1',\r\n          content: 'Content 1',\r\n          author: 'Author 1',\r\n          timeOfCreation: new Date(),\r\n          status: 'CONCEPT' as const,\r\n        },\r\n      ];\r\n      postService.getConceptPosts.and.returnValue(of(mockConcepts));\r\n\r\n      component.loadConcepts();\r\n\r\n      expect(postService.getConceptPosts).toHaveBeenCalled();\r\n      expect(component.concepts).toEqual(mockConcepts);\r\n    });\r\n\r\n    it('should handle errors when loading concepts', () => {\r\n      const error = 'Error loading concepts';\r\n      postService.getConceptPosts.and.returnValue(throwError(error));\r\n      spyOn(console, 'error');\r\n\r\n      component.loadConcepts();\r\n\r\n      expect(postService.getConceptPosts).toHaveBeenCalled();\r\n      expect(component.concepts).toEqual([]);\r\n      expect(console.error).toHaveBeenCalledWith('Fout bij het laden van concepten:', error);\r\n    });\r\n  });\r\n\r\n  describe('editConcept', () => {\r\n    it('should navigate to the edit concept page with the correct ID', () => {\r\n      const conceptId = '123';\r\n      component.editConcept(conceptId);\r\n\r\n      expect(router.navigate).toHaveBeenCalledWith([`/concepts/${conceptId}`]);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}