{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fakeAsync, TestBed, tick } from \"@angular/core/testing\";\nimport { HomepageComponent } from \"./homepage.component\";\nimport { PostService } from \"@services/post-service.service\";\nimport { CommentService } from \"@services/comment-service.service\";\nimport { AuthService } from \"@services/auth-service.service\";\nimport { Router } from \"@angular/router\";\nimport { throwError } from \"rxjs\";\n;\ndescribe('HomepageComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let commentService;\n  let authService;\n  let router;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getPosts', 'filterPosts']);\n    const commentServiceSpy = jasmine.createSpyObj('CommentService', ['getComments', 'addComment', 'updateComment', 'deleteComment']);\n    const authServiceSpy = jasmine.createSpyObj('AuthService', ['getRole', 'getUserName', 'logout']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      declarations: [HomepageComponent],\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: CommentService,\n        useValue: commentServiceSpy\n      }, {\n        provide: AuthService,\n        useValue: authServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(HomepageComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    commentService = TestBed.inject(CommentService);\n    authService = TestBed.inject(AuthService);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should set role and username on ngOnInit', () => {\n    authService.getRole.and.returnValue('user');\n    authService.getUserName.and.returnValue('testUser');\n    component.ngOnInit();\n    expect(component.role).toBe('user');\n    expect(component.username).toBe('testUser');\n  });\n  it('should set showerror to true if role is hoofdredacteur', () => {\n    authService.getRole.and.returnValue('hoofdredacteur');\n    component.ngOnInit();\n    expect(component.showerror).toBeTrue();\n  });\n  it('should not add comment if content is empty', () => {\n    const postId = '1';\n    component.newComments[postId] = '';\n    component.addComment(postId);\n    expect(component.newComments[postId]).toBe('');\n  });\n  it('should navigate to /concepts on GoToPostConcepts', () => {\n    component.GoToPostConcepts();\n    expect(router.navigate).toHaveBeenCalledWith(['/concepts']);\n  });\n  it('should navigate to /waitingapproval on GoToPostWaitingApprovals', () => {\n    component.GoToPostWaitingApprovals();\n    expect(router.navigate).toHaveBeenCalledWith(['/waitingapproval']);\n  });\n  it('should navigate to /notifications on GoToNotifications', () => {\n    component.GoToNotifications();\n    expect(router.navigate).toHaveBeenCalledWith(['/notifications']);\n  });\n  it('should handle error in addComment', fakeAsync(() => {\n    const postId = '1';\n    component.newComments[postId] = 'New comment';\n    commentService.addComment.and.returnValue(throwError('Error adding comment'));\n    spyOn(console, 'error');\n    component.addComment(postId);\n    tick();\n    expect(console.error).toHaveBeenCalledWith('Error adding comment:', 'Error adding comment');\n  }));\n});","map":{"version":3,"names":["fakeAsync","TestBed","tick","HomepageComponent","PostService","CommentService","AuthService","Router","throwError","describe","component","fixture","postService","commentService","authService","router","beforeEach","_asyncToGenerator","postServiceSpy","jasmine","createSpyObj","commentServiceSpy","authServiceSpy","routerSpy","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","getRole","and","returnValue","getUserName","ngOnInit","role","toBe","username","showerror","toBeTrue","postId","newComments","addComment","GoToPostConcepts","navigate","toHaveBeenCalledWith","GoToPostWaitingApprovals","GoToNotifications","spyOn","console","error"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\homepage\\homepage.components.spec.ts"],"sourcesContent":["import { ComponentFixture, fakeAsync, TestBed, tick } from \"@angular/core/testing\";\r\nimport { HomepageComponent } from \"./homepage.component\";\r\nimport { PostService } from \"@services/post-service.service\";\r\nimport { CommentService } from \"@services/comment-service.service\";\r\nimport { AuthService } from \"@services/auth-service.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { of, throwError } from \"rxjs\";;\r\n\r\ndescribe('HomepageComponent', () => {\r\n    let component: HomepageComponent;\r\n    let fixture: ComponentFixture<HomepageComponent>;\r\n    let postService: jasmine.SpyObj<PostService>;\r\n    let commentService: jasmine.SpyObj<CommentService>;\r\n    let authService: jasmine.SpyObj<AuthService>;\r\n    let router: jasmine.SpyObj<Router>;\r\n  \r\n    beforeEach(async () => {\r\n      const postServiceSpy = jasmine.createSpyObj('PostService', ['getPosts', 'filterPosts']);\r\n      const commentServiceSpy = jasmine.createSpyObj('CommentService', ['getComments', 'addComment', 'updateComment', 'deleteComment']);\r\n      const authServiceSpy = jasmine.createSpyObj('AuthService', ['getRole', 'getUserName', 'logout']);\r\n      const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\r\n  \r\n      await TestBed.configureTestingModule({\r\n        declarations: [HomepageComponent],\r\n        providers: [\r\n          { provide: PostService, useValue: postServiceSpy },\r\n          { provide: CommentService, useValue: commentServiceSpy },\r\n          { provide: AuthService, useValue: authServiceSpy },\r\n          { provide: Router, useValue: routerSpy }\r\n        ]\r\n      }).compileComponents();\r\n  \r\n      fixture = TestBed.createComponent(HomepageComponent);\r\n      component = fixture.componentInstance;\r\n      postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n      commentService = TestBed.inject(CommentService) as jasmine.SpyObj<CommentService>;\r\n      authService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\r\n      router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n      fixture.detectChanges();\r\n    });\r\n  \r\n    it('should create the component', () => {\r\n      expect(component).toBeTruthy();\r\n    });\r\n  \r\n\r\n  \r\n\r\n  \r\n    it('should set role and username on ngOnInit', () => {\r\n      authService.getRole.and.returnValue('user');\r\n      authService.getUserName.and.returnValue('testUser');\r\n      component.ngOnInit();\r\n      expect(component.role).toBe('user');\r\n      expect(component.username).toBe('testUser');\r\n    });\r\n  \r\n    it('should set showerror to true if role is hoofdredacteur', () => {\r\n      authService.getRole.and.returnValue('hoofdredacteur');\r\n      component.ngOnInit();\r\n      expect(component.showerror).toBeTrue();\r\n    });\r\n  \r\n    \r\n  \r\n    it('should not add comment if content is empty', () => {\r\n      const postId = '1';\r\n      component.newComments[postId] = '';\r\n      component.addComment(postId);\r\n      expect(component.newComments[postId]).toBe('');\r\n    })\r\n  \r\n    \r\n    it('should navigate to /concepts on GoToPostConcepts', () => {\r\n      component.GoToPostConcepts();\r\n      expect(router.navigate).toHaveBeenCalledWith(['/concepts']);\r\n    });\r\n  \r\n    it('should navigate to /waitingapproval on GoToPostWaitingApprovals', () => {\r\n      component.GoToPostWaitingApprovals();\r\n      expect(router.navigate).toHaveBeenCalledWith(['/waitingapproval']);\r\n    });\r\n  \r\n    it('should navigate to /notifications on GoToNotifications', () => {\r\n      component.GoToNotifications();\r\n      expect(router.navigate).toHaveBeenCalledWith(['/notifications']);\r\n    }); \r\n   \r\n\r\n    it('should handle error in addComment', fakeAsync(() => {\r\n      const postId = '1';\r\n      component.newComments[postId] = 'New comment';\r\n      commentService.addComment.and.returnValue(throwError('Error adding comment'));\r\n      spyOn(console, 'error');\r\n      component.addComment(postId);\r\n      tick();\r\n      expect(console.error).toHaveBeenCalledWith('Error adding comment:', 'Error adding comment');\r\n    }));\r\n  });"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}