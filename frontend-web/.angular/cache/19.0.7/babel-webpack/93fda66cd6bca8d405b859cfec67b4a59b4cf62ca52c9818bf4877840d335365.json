{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { PostsComponent } from './../posts.component';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PostService } from '@services/post-service.service';\nimport { of, throwError } from 'rxjs';\nimport { PostRequest } from '@models/postRequest.model';\ndescribe('PostsComponent', () => {\n  let component;\n  let fixture;\n  let router;\n  let snackBar;\n  let postService;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['createpost', 'createConceptPost']);\n    yield TestBed.configureTestingModule({\n      declarations: [PostsComponent],\n      providers: [{\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: MatSnackBar,\n        useValue: snackBarSpy\n      }, {\n        provide: PostService,\n        useValue: postServiceSpy\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(PostsComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    snackBar = TestBed.inject(MatSnackBar);\n    postService = TestBed.inject(PostService);\n    fixture.detectChanges();\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should process add post successfully', fakeAsync(() => {\n    const postRequest = new PostRequest('Title', 'Content', 'Author');\n    postService.createpost.and.returnValue(of({}));\n    component.processAdd(postRequest);\n    tick();\n    expect(postService.createpost).toHaveBeenCalledWith(postRequest);\n    expect(snackBar.open).toHaveBeenCalledWith('Post Made succesfully!', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  }));\n  it('should handle error when processing add post', fakeAsync(() => {\n    const postRequest = new PostRequest('Title', 'Content', 'Author');\n    postService.createpost.and.returnValue(throwError('Error creating post'));\n    component.processAdd(postRequest);\n    tick();\n    expect(postService.createpost).toHaveBeenCalledWith(postRequest);\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong, try again', 'Close', {\n      duration: 3000\n    });\n  }));\n  it('should process add concept successfully', fakeAsync(() => {\n    const postRequest = new PostRequest('Title', 'Content', 'Author');\n    postService.createConceptPost.and.returnValue(of({}));\n    component.processAddConcept(postRequest);\n    tick();\n    expect(postService.createConceptPost).toHaveBeenCalledWith(postRequest);\n    expect(snackBar.open).toHaveBeenCalledWith('Concept succesfully saved!', 'Close', {\n      duration: 3000\n    });\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n  }));\n  it('should handle error when processing add concept', fakeAsync(() => {\n    const postRequest = new PostRequest('Title', 'Content', 'Author');\n    postService.createConceptPost.and.returnValue(throwError('Error saving concept'));\n    component.processAddConcept(postRequest);\n    tick();\n    expect(postService.createConceptPost).toHaveBeenCalledWith(postRequest);\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to save the concept', 'Close', {\n      duration: 3000\n    });\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","PostsComponent","Router","MatSnackBar","PostService","of","throwError","PostRequest","describe","component","fixture","router","snackBar","postService","beforeEach","_asyncToGenerator","routerSpy","jasmine","createSpyObj","snackBarSpy","postServiceSpy","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","postRequest","createpost","and","returnValue","processAdd","toHaveBeenCalledWith","open","duration","navigateByUrl","createConceptPost","processAddConcept"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\core\\posts\\create-post\\create-post.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';\r\nimport { PostsComponent } from './../posts.component';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { of, throwError } from 'rxjs';\r\nimport { PostRequest } from '@models/postRequest.model';\r\n\r\ndescribe('PostsComponent', () => {\r\n  let component: PostsComponent;\r\n  let fixture: ComponentFixture<PostsComponent>;\r\n  let router: jasmine.SpyObj<Router>;\r\n  let snackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n\r\n  beforeEach(async () => {\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['createpost', 'createConceptPost']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [PostsComponent],\r\n      providers: [\r\n        { provide: Router, useValue: routerSpy },\r\n        { provide: MatSnackBar, useValue: snackBarSpy },\r\n        { provide: PostService, useValue: postServiceSpy }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PostsComponent);\r\n    component = fixture.componentInstance;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    snackBar = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should process add post successfully', fakeAsync(() => {\r\n    const postRequest = new PostRequest('Title', 'Content', 'Author');\r\n    postService.createpost.and.returnValue(of({}));\r\n    component.processAdd(postRequest);\r\n    tick();\r\n    expect(postService.createpost).toHaveBeenCalledWith(postRequest);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Post Made succesfully!', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  }));\r\n\r\n  it('should handle error when processing add post', fakeAsync(() => {\r\n    const postRequest = new  PostRequest('Title', 'Content', 'Author');\r\n    postService.createpost.and.returnValue(throwError('Error creating post'));\r\n    component.processAdd(postRequest);\r\n    tick();\r\n    expect(postService.createpost).toHaveBeenCalledWith(postRequest);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong, try again', 'Close', { duration: 3000 });\r\n  }));\r\n\r\n  it('should process add concept successfully', fakeAsync(() => {\r\n    const postRequest = new  PostRequest('Title', 'Content', 'Author');\r\n    postService.createConceptPost.and.returnValue(of({}));\r\n    component.processAddConcept(postRequest);\r\n    tick();\r\n    expect(postService.createConceptPost).toHaveBeenCalledWith(postRequest);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Concept succesfully saved!', 'Close', { duration: 3000 });\r\n    expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n  }));\r\n\r\n  it('should handle error when processing add concept', fakeAsync(() => {\r\n    const postRequest = new  PostRequest('Title', 'Content', 'Author');\r\n    postService.createConceptPost.and.returnValue(throwError('Error saving concept'));\r\n    component.processAddConcept(postRequest);\r\n    tick();\r\n    expect(postService.createConceptPost).toHaveBeenCalledWith(postRequest);\r\n    expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to save the concept', 'Close', { duration: 3000 });\r\n  }));\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}