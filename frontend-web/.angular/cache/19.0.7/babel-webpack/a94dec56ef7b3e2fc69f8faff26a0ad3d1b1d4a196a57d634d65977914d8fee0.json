{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@services/auth-service.service';\n// Mock van de Router om navigatie te simuleren in de testen\nclass MockRouter {\n  navigate = jasmine.createSpy('navigate');\n}\ndescribe('AuthService', () => {\n  let service;\n  let router;\n  beforeEach(() => {\n    router = new MockRouter();\n    TestBed.configureTestingModule({\n      providers: [AuthService, {\n        provide: Router,\n        useValue: router\n      }]\n    });\n    service = TestBed.inject(AuthService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('login', () => {\n    it('should return true and navigate to /homepage with valid credentials', () => {\n      const result = service.login('wesley', 'hoofdredacteur');\n      expect(result).toBeTrue();\n      expect(localStorage.getItem('currentUserRole')).toBeDefined();\n      expect(router.navigate).toHaveBeenCalledWith(['/homepage']);\n    });\n    it('should return false with invalid credentials', () => {\n      const result = service.login('invalidUser', 'wrongRole');\n      expect(result).toBeFalse();\n    });\n    it('should store user in localStorage on successful login', () => {\n      service.login('wesley', 'hoofdredacteur');\n      expect(localStorage.getItem('currentUserRole')).toBe(JSON.stringify({\n        username: 'wesley',\n        role: 'hoofdredacteur'\n      }));\n    });\n  });\n  describe('logout', () => {\n    it('should remove current user from localStorage and navigate to root', () => {\n      service.login('wesley', 'hoofdredacteur');\n      service.logout();\n      expect(localStorage.getItem('currentUserRole')).toBeNull();\n      expect(router.navigate).toHaveBeenCalledWith(['']);\n    });\n  });\n  describe('getRole', () => {\n    it('should return the correct role if user is logged in', () => {\n      service.login('wesley', 'hoofdredacteur');\n      expect(service.getRole()).toBe('hoofdredacteur');\n    });\n    it('should return null if no user is logged in', () => {\n      service.logout();\n      expect(service.getRole()).toBeNull();\n    });\n  });\n  describe('isLoggedIn', () => {\n    it('should return true if a user is logged in', () => {\n      service.login('wesley', 'hoofdredacteur');\n      expect(service.isLoggedIn()).toBeTrue();\n    });\n    it('should return false if no user is logged in', () => {\n      service.logout();\n      expect(service.isLoggedIn()).toBeFalse();\n    });\n  });\n  describe('getUserName', () => {\n    it('should return the correct username if user is logged in', () => {\n      service.login('wesley', 'hoofdredacteur');\n      expect(service.getUserName()).toBe('wesley');\n    });\n    it('should return null if no user is logged in', () => {\n      service.logout();\n      expect(service.getUserName()).toBeNull();\n    });\n  });\n  describe('Initialization', () => {\n    it('should load user from localStorage if available', () => {\n      localStorage.removeItem('currentUserRole');\n      localStorage.setItem('currentUserRole', JSON.stringify({\n        username: 'dries',\n        role: 'redacteur'\n      }));\n      const newService = TestBed.inject(AuthService);\n      expect(newService.getUserName()).toBeNull();\n      expect(newService.getRole()).toBe('redacteur');\n    });\n    it('should not load user if localStorage does not have currentUserRole', () => {\n      localStorage.removeItem('currentUserRole');\n      const newService = TestBed.inject(AuthService);\n      expect(newService.getUserName()).toBe('dries');\n      expect(newService.getRole()).toBeNull();\n    });\n  });\n});","map":{"version":3,"names":["TestBed","Router","AuthService","MockRouter","navigate","jasmine","createSpy","describe","service","router","beforeEach","configureTestingModule","providers","provide","useValue","inject","it","expect","toBeTruthy","result","login","toBeTrue","localStorage","getItem","toBeDefined","toHaveBeenCalledWith","toBeFalse","toBe","JSON","stringify","username","role","logout","toBeNull","getRole","isLoggedIn","getUserName","removeItem","setItem","newService"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\shared\\services\\auth-service.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '@services/auth-service.service';\r\nimport { User } from '@models/user.model';\r\n\r\n// Mock van de Router om navigatie te simuleren in de testen\r\nclass MockRouter {\r\n  navigate = jasmine.createSpy('navigate');\r\n}\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n  let router: MockRouter;\r\n\r\n  beforeEach(() => {\r\n    router = new MockRouter();\r\n\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        { provide: Router, useValue: router },\r\n      ],\r\n    });\r\n    service = TestBed.inject(AuthService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should return true and navigate to /homepage with valid credentials', () => {\r\n      const result = service.login('wesley', 'hoofdredacteur');\r\n      expect(result).toBeTrue();\r\n      expect(localStorage.getItem('currentUserRole')).toBeDefined();\r\n      expect(router.navigate).toHaveBeenCalledWith(['/homepage']);\r\n    });\r\n\r\n    it('should return false with invalid credentials', () => {\r\n      const result = service.login('invalidUser', 'wrongRole');\r\n      expect(result).toBeFalse();\r\n    });\r\n\r\n    it('should store user in localStorage on successful login', () => {\r\n      service.login('wesley', 'hoofdredacteur');\r\n      expect(localStorage.getItem('currentUserRole')).toBe(JSON.stringify({ username: 'wesley', role: 'hoofdredacteur' }));\r\n    });\r\n  });\r\n\r\n  describe('logout', () => {\r\n    it('should remove current user from localStorage and navigate to root', () => {\r\n      service.login('wesley', 'hoofdredacteur');\r\n      service.logout();\r\n      expect(localStorage.getItem('currentUserRole')).toBeNull();\r\n      expect(router.navigate).toHaveBeenCalledWith(['']);\r\n    });\r\n  });\r\n\r\n  describe('getRole', () => {\r\n    it('should return the correct role if user is logged in', () => {\r\n      service.login('wesley', 'hoofdredacteur');\r\n      expect(service.getRole()).toBe('hoofdredacteur');\r\n    });\r\n\r\n    it('should return null if no user is logged in', () => {\r\n      service.logout();\r\n      expect(service.getRole()).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('isLoggedIn', () => {\r\n    it('should return true if a user is logged in', () => {\r\n      service.login('wesley', 'hoofdredacteur');\r\n      expect(service.isLoggedIn()).toBeTrue();\r\n    });\r\n\r\n    it('should return false if no user is logged in', () => {\r\n      service.logout();\r\n      expect(service.isLoggedIn()).toBeFalse();\r\n    });\r\n  });\r\n\r\n  describe('getUserName', () => {\r\n    it('should return the correct username if user is logged in', () => {\r\n      service.login('wesley', 'hoofdredacteur');\r\n      expect(service.getUserName()).toBe('wesley');\r\n    });\r\n\r\n    it('should return null if no user is logged in', () => {\r\n      service.logout();\r\n      expect(service.getUserName()).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('should load user from localStorage if available', () => {\r\n      localStorage.removeItem('currentUserRole');\r\n      localStorage.setItem('currentUserRole', JSON.stringify({ username: 'dries', role: 'redacteur' }));\r\n      const newService = TestBed.inject(AuthService);\r\n      expect(newService.getUserName()).toBeNull();\r\n      expect(newService.getRole()).toBe('redacteur');\r\n    });\r\n\r\n    it('should not load user if localStorage does not have currentUserRole', () => {\r\n      localStorage.removeItem('currentUserRole');\r\n      const newService = TestBed.inject(AuthService);\r\n      expect(newService.getUserName()).toBe('dries');\r\n      expect(newService.getRole()).toBeNull();\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}