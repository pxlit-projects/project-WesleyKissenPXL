{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { NotificationsComponent } from './notification.component';\nimport { PostService } from '@services/post-service.service';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\ndescribe('NotificationsComponent', () => {\n  let component;\n  let fixture;\n  let mockPostService;\n  let mockRouter;\n  beforeEach(() => {\n    mockPostService = jasmine.createSpyObj('PostService', ['getNotifications']);\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\n    TestBed.configureTestingModule({\n      declarations: [NotificationsComponent],\n      providers: [{\n        provide: PostService,\n        useValue: mockPostService\n      }, {\n        provide: Router,\n        useValue: mockRouter\n      }]\n    });\n    fixture = TestBed.createComponent(NotificationsComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should load notifications on ngOnInit', () => {\n    const mockNotifications = [{\n      postId: 1,\n      status: 'REJECTED'\n    }, {\n      postId: 2,\n      status: 'ACCEPTED'\n    }];\n    mockPostService.getNotifications.and.returnValue(of(mockNotifications));\n    component.ngOnInit();\n    fixture.detectChanges();\n    expect(component.notifications).toEqual(mockNotifications);\n  });\n  it('should handle notification click and navigate if status is REJECTED', () => {\n    const notification = {\n      postId: 1,\n      status: 'REJECTED'\n    };\n    component.handleNotificationClick(notification);\n    expect(mockRouter.navigate).toHaveBeenCalledWith([`/notifications/${notification.postId}`]);\n  });\n  it('should not navigate if notification status is not REJECTED', () => {\n    const notification = {\n      postId: 1,\n      status: 'ACCEPTED'\n    };\n    component.handleNotificationClick(notification);\n    expect(mockRouter.navigate).not.toHaveBeenCalled();\n  });\n  it('should log an error when loading notifications fails', () => {\n    spyOn(console, 'error');\n    mockPostService.getNotifications.and.returnValue(of(new Error('Error loading notifications')));\n    component.loadNotifications();\n    expect(console.error).toHaveBeenCalledWith('Error loading notifications:', jasmine.any(Error));\n  });\n});","map":{"version":3,"names":["TestBed","NotificationsComponent","PostService","Router","of","describe","component","fixture","mockPostService","mockRouter","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","createComponent","componentInstance","it","expect","toBeTruthy","mockNotifications","postId","status","getNotifications","and","returnValue","ngOnInit","detectChanges","notifications","toEqual","notification","handleNotificationClick","navigate","toHaveBeenCalledWith","not","toHaveBeenCalled","spyOn","console","Error","loadNotifications","error","any"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\notificationPage\\notification.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { NotificationsComponent } from './notification.component';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { Router } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { Notificatie } from '@models/notificatie.model';\r\n\r\ndescribe('NotificationsComponent', () => {\r\n  let component: NotificationsComponent;\r\n  let fixture: ComponentFixture<NotificationsComponent>;\r\n  let mockPostService: jasmine.SpyObj<PostService>;\r\n  let mockRouter: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(() => {\r\n    mockPostService = jasmine.createSpyObj('PostService', ['getNotifications']);\r\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    TestBed.configureTestingModule({\r\n      declarations: [NotificationsComponent],\r\n      providers: [\r\n        { provide: PostService, useValue: mockPostService },\r\n        { provide: Router, useValue: mockRouter },\r\n      ],\r\n    });\r\n\r\n    fixture = TestBed.createComponent(NotificationsComponent);\r\n    component = fixture.componentInstance;\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should load notifications on ngOnInit', () => {\r\n    const mockNotifications: Notificatie[] = [\r\n      { postId: 1, status: 'REJECTED' },\r\n      { postId: 2, status: 'ACCEPTED' },\r\n    ];\r\n    \r\n    mockPostService.getNotifications.and.returnValue(of(mockNotifications));\r\n\r\n    component.ngOnInit();\r\n    fixture.detectChanges();\r\n\r\n    expect(component.notifications).toEqual(mockNotifications);\r\n  });\r\n\r\n  it('should handle notification click and navigate if status is REJECTED', () => {\r\n    const notification: Notificatie = { postId: 1, status: 'REJECTED' };\r\n    \r\n    component.handleNotificationClick(notification);\r\n\r\n    expect(mockRouter.navigate).toHaveBeenCalledWith([`/notifications/${notification.postId}`]);\r\n  });\r\n\r\n  it('should not navigate if notification status is not REJECTED', () => {\r\n    const notification: Notificatie = { postId: 1, status: 'ACCEPTED' };\r\n    \r\n    component.handleNotificationClick(notification);\r\n\r\n    expect(mockRouter.navigate).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should log an error when loading notifications fails', () => {\r\n    spyOn(console, 'error');\r\n    mockPostService.getNotifications.and.returnValue(of(new Error('Error loading notifications')));\r\n\r\n    component.loadNotifications();\r\n\r\n    expect(console.error).toHaveBeenCalledWith('Error loading notifications:', jasmine.any(Error));\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}