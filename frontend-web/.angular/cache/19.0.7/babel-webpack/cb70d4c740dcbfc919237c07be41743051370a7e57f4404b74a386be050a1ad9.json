{"ast":null,"code":"import _asyncToGenerator from \"C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { of, throwError } from 'rxjs';\nimport { EditConceptComponent } from './edit-concept.component';\nimport { PostService } from '@services/post-service.service';\nimport { FormsModule } from '@angular/forms';\ndescribe('EditConceptComponent', () => {\n  let component;\n  let fixture;\n  let postService;\n  let router;\n  let snackBar;\n  let route;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    const postServiceSpy = jasmine.createSpyObj('PostService', ['getConceptById', 'updateConcept', 'publishConcept']);\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\n    yield TestBed.configureTestingModule({\n      imports: [EditConceptComponent, FormsModule],\n      providers: [{\n        provide: PostService,\n        useValue: postServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: MatSnackBar,\n        useValue: snackBarSpy\n      }, {\n        provide: ActivatedRoute,\n        useValue: {\n          snapshot: {\n            params: {\n              id: 'test-concept-id'\n            }\n          }\n        }\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(EditConceptComponent);\n    component = fixture.componentInstance;\n    postService = TestBed.inject(PostService);\n    router = TestBed.inject(Router);\n    snackBar = TestBed.inject(MatSnackBar);\n    route = TestBed.inject(ActivatedRoute);\n  }));\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('ngOnInit', () => {\n    it('should initialize conceptId and load the concept', () => {\n      spyOn(component, 'loadConcept');\n      component.ngOnInit();\n      expect(component.conceptId).toBe('test-concept-id');\n      expect(component.loadConcept).toHaveBeenCalled();\n    });\n  });\n  describe('loadConcept', () => {\n    it('should load concept data successfully', () => {\n      const mockConcept = {\n        title: 'Mock Title',\n        author: 'Mock Author',\n        content: 'Mock Content'\n      };\n      postService.getConceptById.and.returnValue(of(mockConcept));\n      component.loadConcept();\n      expect(postService.getConceptById).toHaveBeenCalledWith('test-concept-id');\n      expect(component.concept).toEqual(mockConcept);\n    });\n    it('should handle error when loading concept data', () => {\n      const error = 'Error loading concept';\n      postService.getConceptById.and.returnValue(throwError(error));\n      spyOn(console, 'error');\n      component.loadConcept();\n      expect(postService.getConceptById).toHaveBeenCalledWith('test-concept-id');\n      expect(console.error).toHaveBeenCalledWith('Fout bij het laden van het concept:', error);\n    });\n  });\n  describe('saveAsConcept', () => {\n    it('should handle error when saving concept', () => {\n      postService.updateConcept.and.returnValue(throwError('Error updating concept'));\n      component.saveAsConcept();\n      expect(postService.updateConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\n      expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to save the updated concept', 'Close', {\n        duration: 3000\n      });\n    });\n  });\n  describe('publish', () => {\n    it('should publish the concept and show a success message', () => {\n      postService.publishConcept.and.returnValue(of(null));\n      component.concept = {\n        title: 'Title to Publish',\n        author: 'Author',\n        content: 'Content to Publish'\n      };\n      component.publish();\n      expect(postService.publishConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\n      expect(snackBar.open).toHaveBeenCalledWith('Concept emited successfully!', 'Close', {\n        duration: 3000\n      });\n      expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\n    });\n    it('should handle error when publishing concept', () => {\n      postService.publishConcept.and.returnValue(throwError('Error publishing concept'));\n      component.publish();\n      expect(postService.publishConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\n      expect(snackBar.open).toHaveBeenCalledWith('Something went wrong when trying to publish the concept', 'Close', {\n        duration: 3000\n      });\n    });\n  });\n});","map":{"version":3,"names":["TestBed","ActivatedRoute","Router","MatSnackBar","of","throwError","EditConceptComponent","PostService","FormsModule","describe","component","fixture","postService","router","snackBar","route","beforeEach","_asyncToGenerator","postServiceSpy","jasmine","createSpyObj","routerSpy","snackBarSpy","configureTestingModule","imports","providers","provide","useValue","snapshot","params","id","compileComponents","createComponent","componentInstance","inject","it","expect","toBeTruthy","spyOn","ngOnInit","conceptId","toBe","loadConcept","toHaveBeenCalled","mockConcept","title","author","content","getConceptById","and","returnValue","toHaveBeenCalledWith","concept","toEqual","error","console","updateConcept","saveAsConcept","open","duration","publishConcept","publish","navigateByUrl"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\conceptsPage\\editconcept\\edit-concept.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { of, throwError } from 'rxjs';\r\nimport { EditConceptComponent } from './edit-concept.component';\r\nimport { PostService } from '@services/post-service.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\ndescribe('EditConceptComponent', () => {\r\n  let component: EditConceptComponent;\r\n  let fixture: ComponentFixture<EditConceptComponent>;\r\n  let postService: jasmine.SpyObj<PostService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n  let snackBar: jasmine.SpyObj<MatSnackBar>;\r\n  let route: ActivatedRoute;\r\n\r\n  beforeEach(async () => {\r\n    const postServiceSpy = jasmine.createSpyObj('PostService', [\r\n      'getConceptById',\r\n      'updateConcept',\r\n      'publishConcept',\r\n    ]);\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n    const snackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [EditConceptComponent, FormsModule],\r\n      providers: [\r\n        { provide: PostService, useValue: postServiceSpy },\r\n        { provide: Router, useValue: routerSpy },\r\n        { provide: MatSnackBar, useValue: snackBarSpy },\r\n        {\r\n          provide: ActivatedRoute,\r\n          useValue: {\r\n            snapshot: {\r\n              params: { id: 'test-concept-id' },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(EditConceptComponent);\r\n    component = fixture.componentInstance;\r\n    postService = TestBed.inject(PostService) as jasmine.SpyObj<PostService>;\r\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n    snackBar = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\r\n    route = TestBed.inject(ActivatedRoute);\r\n  });\r\n\r\n  it('should create the component', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  describe('ngOnInit', () => {\r\n    it('should initialize conceptId and load the concept', () => {\r\n      spyOn(component, 'loadConcept');\r\n      component.ngOnInit();\r\n      expect(component.conceptId).toBe('test-concept-id');\r\n      expect(component.loadConcept).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('loadConcept', () => {\r\n    it('should load concept data successfully', () => {\r\n      const mockConcept = {\r\n        title: 'Mock Title',\r\n        author: 'Mock Author',\r\n        content: 'Mock Content',\r\n      };\r\n      postService.getConceptById.and.returnValue(of(mockConcept));\r\n\r\n      component.loadConcept();\r\n\r\n      expect(postService.getConceptById).toHaveBeenCalledWith('test-concept-id');\r\n      expect(component.concept).toEqual(mockConcept);\r\n    });\r\n\r\n    it('should handle error when loading concept data', () => {\r\n      const error = 'Error loading concept';\r\n      postService.getConceptById.and.returnValue(throwError(error));\r\n      spyOn(console, 'error');\r\n\r\n      component.loadConcept();\r\n\r\n      expect(postService.getConceptById).toHaveBeenCalledWith('test-concept-id');\r\n      expect(console.error).toHaveBeenCalledWith('Fout bij het laden van het concept:', error);\r\n    });\r\n  });\r\n\r\n  describe('saveAsConcept', () => {\r\n    \r\n\r\n    it('should handle error when saving concept', () => {\r\n      postService.updateConcept.and.returnValue(throwError('Error updating concept'));\r\n\r\n      component.saveAsConcept();\r\n\r\n      expect(postService.updateConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\r\n      expect(snackBar.open).toHaveBeenCalledWith(\r\n        'Something went wrong when trying to save the updated concept',\r\n        'Close',\r\n        { duration: 3000 }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('publish', () => {\r\n    it('should publish the concept and show a success message', () => {\r\n      postService.publishConcept.and.returnValue(of(null));\r\n      component.concept = {\r\n        title: 'Title to Publish',\r\n        author: 'Author',\r\n        content: 'Content to Publish',\r\n      };\r\n\r\n      component.publish();\r\n\r\n      expect(postService.publishConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\r\n      expect(snackBar.open).toHaveBeenCalledWith('Concept emited successfully!', 'Close', {\r\n        duration: 3000,\r\n      });\r\n      expect(router.navigateByUrl).toHaveBeenCalledWith('/homepage');\r\n    });\r\n\r\n    it('should handle error when publishing concept', () => {\r\n      postService.publishConcept.and.returnValue(throwError('Error publishing concept'));\r\n\r\n      component.publish();\r\n\r\n      expect(postService.publishConcept).toHaveBeenCalledWith('test-concept-id', component.concept);\r\n      expect(snackBar.open).toHaveBeenCalledWith(\r\n        'Something went wrong when trying to publish the concept',\r\n        'Close',\r\n        { duration: 3000 }\r\n      );\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}