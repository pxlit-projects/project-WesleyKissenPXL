{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Version, InjectionToken, inject, NgModule, LOCALE_ID, Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, ElementRef, ANIMATION_MODULE_TYPE, NgZone, Injector, Input, booleanAttribute, ChangeDetectorRef, EventEmitter, isSignal, Output, ViewChild } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, _IdGenerator } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { normalizePassiveListenerOptions, _getEventTarget, Platform } from '@angular/cdk/platform';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\n\n/** Current version of Angular Material. */\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\nconst _c2 = [\"text\"];\nconst _c3 = [[[\"mat-icon\"]], \"*\"];\nconst _c4 = [\"mat-icon\", \"*\"];\nfunction MatOption_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled)(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\");\n  }\n}\nfunction MatOption_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled);\n  }\n}\nfunction MatOption_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.group.label, \")\");\n  }\n}\nconst _c5 = [\"mat-internal-form-field\", \"\"];\nconst _c6 = [\"*\"];\nconst VERSION = new Version('19.0.5');\n\n/** @docs-private */\nclass AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n/** @docs-private */\nclass AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nclass MatCommonModule {\n  constructor() {\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    inject(HighContrastModeDetector)._applyBodyHighContrastModeCssClasses();\n  }\n  static ɵfac = function MatCommonModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatCommonModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatCommonModule,\n    imports: [BidiModule],\n    exports: [BidiModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [BidiModule, BidiModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule],\n      exports: [BidiModule]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n  _defaultMatcher;\n  ngControl;\n  _parentFormGroup;\n  _parentForm;\n  _stateChanges;\n  /** Whether the tracker is currently in an error state. */\n  errorState = false;\n  /** User-defined matcher for the error state. */\n  matcher;\n  constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n    this._defaultMatcher = _defaultMatcher;\n    this.ngControl = ngControl;\n    this._parentFormGroup = _parentFormGroup;\n    this._parentForm = _parentForm;\n    this._stateChanges = _stateChanges;\n  }\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const matcher = this.matcher || this._defaultMatcher;\n    const control = this.ngControl ? this.ngControl.control : null;\n    const newState = matcher?.isErrorState(control, parent) ?? false;\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this._stateChanges.next();\n    }\n  }\n}\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\nconst NOT_IMPLEMENTED = 'Method not implemented';\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n  /** The locale to use for all dates. */\n  locale;\n  _localeChanges = new Subject();\n  /** A stream that emits when the locale changes. */\n  localeChanges = this._localeChanges;\n  /**\n   * Sets the time of one date to the time of another.\n   * @param target Date whose time will be set.\n   * @param hours New hours to set on the date object.\n   * @param minutes New minutes to set on the date object.\n   * @param seconds New seconds to set on the date object.\n   */\n  setTime(target, hours, minutes, seconds) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the hours component of the given date.\n   * @param date The date to extract the hours from.\n   */\n  getHours(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the minutes component of the given date.\n   * @param date The date to extract the minutes from.\n   */\n  getMinutes(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the seconds component of the given date.\n   * @param date The date to extract the seconds from.\n   */\n  getSeconds(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Parses a date with a specific time from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   */\n  parseTime(value, parseFormat) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Adds an amount of seconds to the specified date.\n   * @param date Date to which to add the seconds.\n   * @param amount Amount of seconds to add to the date.\n   */\n  addSeconds(date, amount) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Compares the time values of two dates.\n   * @param first First date to compare.\n   * @param second Second date to compare.\n   * @returns 0 if the times are equal, a number less than 0 if the first time is earlier,\n   *     a number greater than 0 if the first time is later.\n   */\n  compareTime(first, second) {\n    return this.getHours(first) - this.getHours(second) || this.getMinutes(first) - this.getMinutes(second) || this.getSeconds(first) - this.getSeconds(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first, second) {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Checks if the times of two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the times of the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameTime(first, second) {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareTime(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings with an out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Matches a time string. Supported formats:\n * - {{hours}}:{{minutes}}\n * - {{hours}}:{{minutes}}:{{seconds}}\n * - {{hours}}:{{minutes}} AM/PM\n * - {{hours}}:{{minutes}}:{{seconds}} AM/PM\n * - {{hours}}.{{minutes}}\n * - {{hours}}.{{minutes}}.{{seconds}}\n * - {{hours}}.{{minutes}} AM/PM\n * - {{hours}}.{{minutes}}.{{seconds}} AM/PM\n */\nconst TIME_REGEX = /^(\\d?\\d)[:.](\\d?\\d)(?:[:.](\\d?\\d))?\\s*(AM|PM)?$/i;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay = false;\n  /** The injected locale. */\n  _matDateLocale = inject(MAT_DATE_LOCALE, {\n    optional: true\n  });\n  constructor() {\n    super();\n    const matDateLocale = inject(MAT_DATE_LOCALE, {\n      optional: true\n    });\n    if (matDateLocale !== undefined) {\n      this._matDateLocale = matDateLocale;\n    }\n    super.setLocale(this._matDateLocale);\n  }\n  getYear(date) {\n    return date.getFullYear();\n  }\n  getMonth(date) {\n    return date.getMonth();\n  }\n  getDate(date) {\n    return date.getDate();\n  }\n  getDayOfWeek(date) {\n    return date.getDay();\n  }\n  getMonthNames(style) {\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      month: style,\n      timeZone: 'utc'\n    });\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n  getDateNames() {\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      day: 'numeric',\n      timeZone: 'utc'\n    });\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n  getDayOfWeekNames(style) {\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      weekday: style,\n      timeZone: 'utc'\n    });\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n  getYearName(date) {\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      year: 'numeric',\n      timeZone: 'utc'\n    });\n    return this._format(dtf, date);\n  }\n  getFirstDayOfWeek() {\n    // At the time of writing `Intl.Locale` isn't available\n    // in the internal types so we need to cast to `any`.\n    if (typeof Intl !== 'undefined' && Intl.Locale) {\n      const locale = new Intl.Locale(this.locale);\n      // Some browsers implement a `getWeekInfo` method while others have a `weekInfo` getter.\n      // Note that this isn't supported in all browsers so we need to null check it.\n      const firstDay = (locale.getWeekInfo?.() || locale.weekInfo)?.firstDay ?? 0;\n      // `weekInfo.firstDay` is a number between 1 and 7 where, starting from Monday,\n      // whereas our representation is 0 to 6 where 0 is Sunday so we need to normalize it.\n      return firstDay === 7 ? 0 : firstDay;\n    }\n    // Default to Sunday if the browser doesn't provide the week information.\n    return 0;\n  }\n  getNumDaysInMonth(date) {\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n  clone(date) {\n    return new Date(date.getTime());\n  }\n  createDate(year, month, date) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n    return result;\n  }\n  today() {\n    return new Date();\n  }\n  parse(value, parseFormat) {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n  format(date, displayFormat) {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      ...displayFormat,\n      timeZone: 'utc'\n    });\n    return this._format(dtf, date);\n  }\n  addCalendarYears(date, years) {\n    return this.addCalendarMonths(date, years * 12);\n  }\n  addCalendarMonths(date, months) {\n    let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n    return newDate;\n  }\n  addCalendarDays(date, days) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n  toIso8601(date) {\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n  }\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value) {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n  isDateInstance(obj) {\n    return obj instanceof Date;\n  }\n  isValid(date) {\n    return !isNaN(date.getTime());\n  }\n  invalid() {\n    return new Date(NaN);\n  }\n  setTime(target, hours, minutes, seconds) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!inRange(hours, 0, 23)) {\n        throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n      }\n      if (!inRange(minutes, 0, 59)) {\n        throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n      }\n      if (!inRange(seconds, 0, 59)) {\n        throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n      }\n    }\n    const clone = this.clone(target);\n    clone.setHours(hours, minutes, seconds, 0);\n    return clone;\n  }\n  getHours(date) {\n    return date.getHours();\n  }\n  getMinutes(date) {\n    return date.getMinutes();\n  }\n  getSeconds(date) {\n    return date.getSeconds();\n  }\n  parseTime(userValue, parseFormat) {\n    if (typeof userValue !== 'string') {\n      return userValue instanceof Date ? new Date(userValue.getTime()) : null;\n    }\n    const value = userValue.trim();\n    if (value.length === 0) {\n      return null;\n    }\n    // Attempt to parse the value directly.\n    let result = this._parseTimeString(value);\n    // Some locales add extra characters around the time, but are otherwise parseable\n    // (e.g. `00:05 ч.` in bg-BG). Try replacing all non-number and non-colon characters.\n    if (result === null) {\n      const withoutExtras = value.replace(/[^0-9:(AM|PM)]/gi, '').trim();\n      if (withoutExtras.length > 0) {\n        result = this._parseTimeString(withoutExtras);\n      }\n    }\n    return result || this.invalid();\n  }\n  addSeconds(date, amount) {\n    return new Date(date.getTime() + amount * 1000);\n  }\n  /** Creates a date but allows the month and date to overflow. */\n  _createDateWithOverflow(year, month, date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  _2digit(n) {\n    return ('00' + n).slice(-2);\n  }\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  _format(dtf, date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n  /**\n   * Attempts to parse a time string into a date object. Returns null if it cannot be parsed.\n   * @param value Time string to parse.\n   */\n  _parseTimeString(value) {\n    // Note: we can technically rely on the browser for the time parsing by generating\n    // an ISO string and appending the string to the end of it. We don't do it, because\n    // browsers aren't consistent in what they support. Some examples:\n    // - Safari doesn't support AM/PM.\n    // - Firefox produces a valid date object if the time string has overflows (e.g. 12:75) while\n    //   other browsers produce an invalid date.\n    // - Safari doesn't allow padded numbers.\n    const parsed = value.toUpperCase().match(TIME_REGEX);\n    if (parsed) {\n      let hours = parseInt(parsed[1]);\n      const minutes = parseInt(parsed[2]);\n      let seconds = parsed[3] == null ? undefined : parseInt(parsed[3]);\n      const amPm = parsed[4];\n      if (hours === 12) {\n        hours = amPm === 'AM' ? 0 : hours;\n      } else if (amPm === 'PM') {\n        hours += 12;\n      }\n      if (inRange(hours, 0, 23) && inRange(minutes, 0, 59) && (seconds == null || inRange(seconds, 0, 59))) {\n        return this.setTime(this.today(), hours, minutes, seconds || 0);\n      }\n    }\n    return null;\n  }\n  static ɵfac = function NativeDateAdapter_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NativeDateAdapter)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NativeDateAdapter,\n    factory: NativeDateAdapter.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NativeDateAdapter, [{\n    type: Injectable\n  }], () => [], null);\n})();\n/** Checks whether a number is within a certain range. */\nfunction inRange(value, min, max) {\n  return !isNaN(value) && value >= min && value <= max;\n}\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null,\n    timeInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    timeInput: {\n      hour: 'numeric',\n      minute: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    },\n    timeOptionLabel: {\n      hour: 'numeric',\n      minute: 'numeric'\n    }\n  }\n};\nclass NativeDateModule {\n  static ɵfac = function NativeDateModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NativeDateModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NativeDateModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: DateAdapter,\n      useClass: NativeDateAdapter\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NativeDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: DateAdapter,\n        useClass: NativeDateAdapter\n      }]\n    }]\n  }], null, null);\n})();\nclass MatNativeDateModule {\n  static ɵfac = function MatNativeDateModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatNativeDateModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatNativeDateModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideNativeDateAdapter()]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNativeDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [provideNativeDateAdapter()]\n    }]\n  }], null, null);\n})();\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n  return [{\n    provide: DateAdapter,\n    useClass: NativeDateAdapter\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n}\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n  isErrorState(control, form) {\n    return !!(control && control.invalid && (control.dirty || form && form.submitted));\n  }\n  static ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ShowOnDirtyErrorStateMatcher)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ShowOnDirtyErrorStateMatcher,\n    factory: ShowOnDirtyErrorStateMatcher.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShowOnDirtyErrorStateMatcher, [{\n    type: Injectable\n  }], null, null);\n})();\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n  isErrorState(control, form) {\n    return !!(control && control.invalid && (control.touched || form && form.submitted));\n  }\n  static ɵfac = function ErrorStateMatcher_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ErrorStateMatcher)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ErrorStateMatcher,\n    factory: ErrorStateMatcher.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ErrorStateMatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Component used to load structural styles for focus indicators.\n * @docs-private\n */\nclass _StructuralStylesLoader {\n  static ɵfac = function _StructuralStylesLoader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _StructuralStylesLoader)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _StructuralStylesLoader,\n    selectors: [[\"structural-styles\"]],\n    decls: 0,\n    vars: 0,\n    template: function _StructuralStylesLoader_Template(rf, ctx) {},\n    styles: [\".mat-focus-indicator{position:relative}.mat-focus-indicator::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;display:var(--mat-focus-indicator-display, none);border-width:var(--mat-focus-indicator-border-width, 3px);border-style:var(--mat-focus-indicator-border-style, solid);border-color:var(--mat-focus-indicator-border-color, transparent);border-radius:var(--mat-focus-indicator-border-radius, 4px)}.mat-focus-indicator:focus::before{content:\\\"\\\"}@media(forced-colors: active){html{--mat-focus-indicator-display: block}}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_StructuralStylesLoader, [{\n    type: Component,\n    args: [{\n      selector: 'structural-styles',\n      encapsulation: ViewEncapsulation.None,\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-focus-indicator{position:relative}.mat-focus-indicator::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;display:var(--mat-focus-indicator-display, none);border-width:var(--mat-focus-indicator-border-width, 3px);border-style:var(--mat-focus-indicator-border-style, solid);border-color:var(--mat-focus-indicator-border-color, transparent);border-radius:var(--mat-focus-indicator-border-radius, 4px)}.mat-focus-indicator:focus::before{content:\\\"\\\"}@media(forced-colors: active){html{--mat-focus-indicator-display: block}}\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n  static ɵfac = function MatLine_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatLine)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLine,\n    selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n    hostAttrs: [1, \"mat-line\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLine, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-line], [matLine]',\n      host: {\n        'class': 'mat-line'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({\n    length\n  }) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n  static ɵfac = function MatLineModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatLineModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatLineModule,\n    imports: [MatCommonModule, MatLine],\n    exports: [MatLine, MatCommonModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLineModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatLine],\n      exports: [MatLine, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/** Possible states for a ripple element. */\nvar RippleState;\n(function (RippleState) {\n  RippleState[RippleState[\"FADING_IN\"] = 0] = \"FADING_IN\";\n  RippleState[RippleState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  RippleState[RippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n  RippleState[RippleState[\"HIDDEN\"] = 3] = \"HIDDEN\";\n})(RippleState || (RippleState = {}));\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n  _renderer;\n  element;\n  config;\n  _animationForciblyDisabledThroughCss;\n  /** Current state of the ripple. */\n  state = RippleState.HIDDEN;\n  constructor(_renderer, /** Reference to the ripple HTML element. */\n  element, /** Ripple configuration used for the ripple. */\n  config, /* Whether animations are forcibly disabled for ripples through CSS. */\n  _animationForciblyDisabledThroughCss = false) {\n    this._renderer = _renderer;\n    this.element = element;\n    this.config = config;\n    this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;\n  }\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions$1 = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nclass RippleEventManager {\n  _events = new Map();\n  /** Adds an event handler. */\n  addHandler(ngZone, name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n      });\n    }\n  }\n  /** Removes an event handler. */\n  removeHandler(name, element, handler) {\n    const handlersForEvent = this._events.get(name);\n    if (!handlersForEvent) {\n      return;\n    }\n    const handlersForElement = handlersForEvent.get(element);\n    if (!handlersForElement) {\n      return;\n    }\n    handlersForElement.delete(handler);\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n    }\n  }\n  /** Event handler that is bound and which dispatches the events to the different targets. */\n  _delegateEventHandler = event => {\n    const target = _getEventTarget(event);\n    if (target) {\n      this._events.get(event.type)?.forEach((handlers, element) => {\n        if (element === target || element.contains(target)) {\n          handlers.forEach(handler => handler.handleEvent(event));\n        }\n      });\n    }\n  };\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\nclass _MatRippleStylesLoader {\n  static ɵfac = function _MatRippleStylesLoader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _MatRippleStylesLoader)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _MatRippleStylesLoader,\n    selectors: [[\"ng-component\"]],\n    hostAttrs: [\"mat-ripple-style-loader\", \"\"],\n    decls: 0,\n    vars: 0,\n    template: function _MatRippleStylesLoader_Template(rf, ctx) {},\n    styles: [\".mat-ripple{overflow:hidden;position:relative}.mat-ripple:not(:empty){transform:translateZ(0)}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;transition:opacity,transform 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale3d(0, 0, 0);background-color:var(--mat-ripple-color, color-mix(in srgb, var(--mat-sys-on-surface) 10%, transparent))}@media(forced-colors: active){.mat-ripple-element{display:none}}.cdk-drag-preview .mat-ripple-element,.cdk-drag-placeholder .mat-ripple-element{display:none}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatRippleStylesLoader, [{\n    type: Component,\n    args: [{\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'mat-ripple-style-loader': ''\n      },\n      styles: [\".mat-ripple{overflow:hidden;position:relative}.mat-ripple:not(:empty){transform:translateZ(0)}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;transition:opacity,transform 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale3d(0, 0, 0);background-color:var(--mat-ripple-color, color-mix(in srgb, var(--mat-sys-on-surface) 10%, transparent))}@media(forced-colors: active){.mat-ripple-element{display:none}}.cdk-drag-preview .mat-ripple-element,.cdk-drag-placeholder .mat-ripple-element{display:none}\"]\n    }]\n  }], null, null);\n})();\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n  _target;\n  _ngZone;\n  _platform;\n  /** Element where the ripples are being added to. */\n  _containerElement;\n  /** Element which triggers the ripple elements on mouse events. */\n  _triggerElement;\n  /** Whether the pointer is currently down or not. */\n  _isPointerDown = false;\n  /**\n   * Map of currently active ripple references.\n   * The ripple reference is mapped to its element event listeners.\n   * The reason why `| null` is used is that event listeners are added only\n   * when the condition is truthy (see the `_startFadeOutTransition` method).\n   */\n  _activeRipples = new Map();\n  /** Latest non-persistent ripple that was triggered. */\n  _mostRecentTransientRipple;\n  /** Time in milliseconds when the last touchstart event happened. */\n  _lastTouchStartEvent;\n  /** Whether pointer-up event listeners have been registered. */\n  _pointerUpEventsRegistered = false;\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  _containerRect;\n  static _eventManager = new RippleEventManager();\n  constructor(_target, _ngZone, elementOrElementRef, _platform, injector) {\n    this._target = _target;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n    if (injector) {\n      injector.get(_CdkPrivateStyleLoader).load(_MatRippleStylesLoader);\n    }\n  }\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x, y, config = {}) {\n    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...config.animation\n    };\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n    this._containerElement.appendChild(ripple);\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss = userTransitionProperty === 'none' ||\n    // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n    // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n    userTransitionDuration === '0s' || userTransitionDuration === '0s, 0s' ||\n    // If the container is 0x0, it's likely `display: none`.\n    containerRect.width === 0 && containerRect.height === 0;\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n    rippleRef.state = RippleState.FADING_IN;\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n    let eventListeners = null;\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => {\n          // Clear the fallback timer since the transition fired correctly.\n          if (eventListeners) {\n            eventListeners.fallbackTimer = null;\n          }\n          clearTimeout(fallbackTimer);\n          this._finishRippleTransition(rippleRef);\n        };\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        // In some cases where there's a higher load on the browser, it can choose not to dispatch\n        // neither `transitionend` nor `transitioncancel` (see b/227356674). This timer serves as a\n        // fallback for such cases so that the ripple doesn't become stuck. We add a 100ms buffer\n        // because timers aren't precise. Note that another approach can be to transition the ripple\n        // to the `VISIBLE` state immediately above and to `FADING_IN` afterwards inside\n        // `transitionstart`. We go with the timer because it's one less event listener and\n        // it's less likely to break existing tests.\n        const fallbackTimer = setTimeout(onTransitionCancel, enterDuration + 100);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {\n          onTransitionEnd,\n          onTransitionCancel,\n          fallbackTimer\n        };\n      });\n    }\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n    return rippleRef;\n  }\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n    const rippleEl = rippleRef.element;\n    const animationConfig = {\n      ...defaultRippleAnimationConfig,\n      ...rippleRef.config.animation\n    };\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef) {\n    const element = coerceElement(elementOrElementRef);\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event);\n    } else {\n      this._onPointerUp();\n    }\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  _finishRippleTransition(rippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  _startFadeOutTransition(rippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {\n      persistent\n    } = rippleRef.config;\n    rippleRef.state = RippleState.VISIBLE;\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  _destroyRipple(rippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n      if (eventListeners.fallbackTimer !== null) {\n        clearTimeout(eventListeners.fallbackTimer);\n      }\n    }\n    rippleRef.element.remove();\n  }\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  _onMousedown(event) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n  /** Function being called whenever the trigger is being pressed using touch. */\n  _onTouchStart(event) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n  /** Function being called whenever the trigger is being released. */\n  _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n    this._isPointerDown = false;\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n  _getActiveRipples() {\n    return Array.from(this._activeRipples.keys());\n  }\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n    if (trigger) {\n      pointerDownEvents.forEach(type => RippleRenderer._eventManager.removeHandler(type, trigger, this));\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type => trigger.removeEventListener(type, this, passiveCapturingEventOptions));\n        this._pointerUpEventsRegistered = false;\n      }\n    }\n  }\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n  _elementRef = inject(ElementRef);\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {\n    optional: true\n  });\n  /** Custom color for all ripples. */\n  color;\n  /** Whether the ripples should be visible outside the component's bounds. */\n  unbounded;\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  centered;\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  radius = 0;\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation;\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  _disabled = false;\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n  set trigger(trigger) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  _trigger;\n  /** Renderer for the ripple DOM manipulations. */\n  _rippleRenderer;\n  /** Options that are set globally for all ripples. */\n  _globalOptions;\n  /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n  _isInitialized = false;\n  constructor() {\n    const ngZone = inject(NgZone);\n    const platform = inject(Platform);\n    const globalOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n      optional: true\n    });\n    const injector = inject(Injector);\n    // Note: cannot use `inject()` here, because this class\n    // gets instantiated manually in the ripple loader.\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, this._elementRef, platform, injector);\n  }\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n  /** Fades out all currently showing non-persistent ripple elements. */\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig() {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {\n          enterDuration: 0,\n          exitDuration: 0\n        } : {}),\n        ...this.animation\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp\n    };\n  }\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled() {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX, y = 0, config) {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {\n        ...this.rippleConfig,\n        ...config\n      });\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {\n        ...this.rippleConfig,\n        ...configOrX\n      });\n    }\n  }\n  static ɵfac = function MatRipple_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRipple)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRipple,\n    selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]],\n    hostAttrs: [1, \"mat-ripple\"],\n    hostVars: 2,\n    hostBindings: function MatRipple_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n      }\n    },\n    inputs: {\n      color: [0, \"matRippleColor\", \"color\"],\n      unbounded: [0, \"matRippleUnbounded\", \"unbounded\"],\n      centered: [0, \"matRippleCentered\", \"centered\"],\n      radius: [0, \"matRippleRadius\", \"radius\"],\n      animation: [0, \"matRippleAnimation\", \"animation\"],\n      disabled: [0, \"matRippleDisabled\", \"disabled\"],\n      trigger: [0, \"matRippleTrigger\", \"trigger\"]\n    },\n    exportAs: [\"matRipple\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRipple, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-ripple], [matRipple]',\n      exportAs: 'matRipple',\n      host: {\n        'class': 'mat-ripple',\n        '[class.mat-ripple-unbounded]': 'unbounded'\n      }\n    }]\n  }], () => [], {\n    color: [{\n      type: Input,\n      args: ['matRippleColor']\n    }],\n    unbounded: [{\n      type: Input,\n      args: ['matRippleUnbounded']\n    }],\n    centered: [{\n      type: Input,\n      args: ['matRippleCentered']\n    }],\n    radius: [{\n      type: Input,\n      args: ['matRippleRadius']\n    }],\n    animation: [{\n      type: Input,\n      args: ['matRippleAnimation']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matRippleDisabled']\n    }],\n    trigger: [{\n      type: Input,\n      args: ['matRippleTrigger']\n    }]\n  });\n})();\nclass MatRippleModule {\n  static ɵfac = function MatRippleModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRippleModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatRippleModule,\n    imports: [MatCommonModule, MatRipple],\n    exports: [MatRipple, MatCommonModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRippleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRipple],\n      exports: [MatRipple, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {\n    optional: true\n  });\n  /** Display state of the checkbox. */\n  state = 'unchecked';\n  /** Whether the checkbox is disabled. */\n  disabled = false;\n  /**\n   * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n   * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n   */\n  appearance = 'full';\n  constructor() {}\n  static ɵfac = function MatPseudoCheckbox_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatPseudoCheckbox)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatPseudoCheckbox,\n    selectors: [[\"mat-pseudo-checkbox\"]],\n    hostAttrs: [1, \"mat-pseudo-checkbox\"],\n    hostVars: 12,\n    hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"mat-pseudo-checkbox-minimal\", ctx.appearance === \"minimal\")(\"mat-pseudo-checkbox-full\", ctx.appearance === \"full\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      state: \"state\",\n      disabled: \"disabled\",\n      appearance: \"appearance\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MatPseudoCheckbox_Template(rf, ctx) {},\n    styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPseudoCheckbox, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'mat-pseudo-checkbox',\n      template: '',\n      host: {\n        'class': 'mat-pseudo-checkbox',\n        '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n        '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n        '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"]\n    }]\n  }], () => [], {\n    state: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }]\n  });\n})();\nclass MatPseudoCheckboxModule {\n  static ɵfac = function MatPseudoCheckboxModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatPseudoCheckboxModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatPseudoCheckboxModule,\n    imports: [MatCommonModule, MatPseudoCheckbox],\n    exports: [MatPseudoCheckbox]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPseudoCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatPseudoCheckbox],\n      exports: [MatPseudoCheckbox]\n    }]\n  }], null, null);\n})();\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup {\n  /** Label for the option group. */\n  label;\n  /** whether the option group is disabled. */\n  disabled = false;\n  /** Unique id for the underlying label. */\n  _labelId = inject(_IdGenerator).getId('mat-optgroup-label-');\n  /** Whether the group is in inert a11y mode. */\n  _inert;\n  constructor() {\n    const parent = inject(MAT_OPTION_PARENT_COMPONENT, {\n      optional: true\n    });\n    this._inert = parent?.inertGroups ?? false;\n  }\n  static ɵfac = function MatOptgroup_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatOptgroup)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatOptgroup,\n    selectors: [[\"mat-optgroup\"]],\n    hostAttrs: [1, \"mat-mdc-optgroup\"],\n    hostVars: 3,\n    hostBindings: function MatOptgroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx._inert ? null : \"group\")(\"aria-disabled\", ctx._inert ? null : ctx.disabled.toString())(\"aria-labelledby\", ctx._inert ? null : ctx._labelId);\n      }\n    },\n    inputs: {\n      label: \"label\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n    },\n    exportAs: [\"matOptgroup\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_OPTGROUP,\n      useExisting: MatOptgroup\n    }]), i0.ɵɵInputTransformsFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 4,\n    consts: [[\"role\", \"presentation\", 1, \"mat-mdc-optgroup-label\", 3, \"id\"], [1, \"mdc-list-item__primary-text\"]],\n    template: function MatOptgroup_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"span\", 0)(1, \"span\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵprojection(4, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mdc-list-item--disabled\", ctx.disabled);\n        i0.ɵɵproperty(\"id\", ctx._labelId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n      }\n    },\n    styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatOptgroup, [{\n    type: Component,\n    args: [{\n      selector: 'mat-optgroup',\n      exportAs: 'matOptgroup',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-mdc-optgroup',\n        '[attr.role]': '_inert ? null : \"group\"',\n        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n        '[attr.aria-labelledby]': '_inert ? null : _labelId'\n      },\n      providers: [{\n        provide: MAT_OPTGROUP,\n        useExisting: MatOptgroup\n      }],\n      template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\",\n      styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\"]\n    }]\n  }], () => [], {\n    label: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n  source;\n  isUserInput;\n  constructor(/** Reference to the option that emitted the event. */\n  source, /** Whether the change in the option's value was a result of a user action. */\n  isUserInput = false) {\n    this.source = source;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption {\n  _element = inject(ElementRef);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _parent = inject(MAT_OPTION_PARENT_COMPONENT, {\n    optional: true\n  });\n  group = inject(MAT_OPTGROUP, {\n    optional: true\n  });\n  _signalDisableRipple = false;\n  _selected = false;\n  _active = false;\n  _disabled = false;\n  _mostRecentViewValue = '';\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n  /** Whether or not the option is currently selected. */\n  get selected() {\n    return this._selected;\n  }\n  /** The form value of the option. */\n  value;\n  /** The unique ID of the option. */\n  id = inject(_IdGenerator).getId('mat-option-');\n  /** Whether the option is disabled. */\n  get disabled() {\n    return this.group && this.group.disabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() {\n    return this._signalDisableRipple ? this._parent.disableRipple() : !!this._parent?.disableRipple;\n  }\n  /** Whether to display checkmark for single-selection. */\n  get hideSingleSelectionIndicator() {\n    return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n  }\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  onSelectionChange = new EventEmitter();\n  /** Element containing the option's text. */\n  _text;\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  _stateChanges = new Subject();\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    this._signalDisableRipple = !!this._parent && isSignal(this._parent.disableRipple);\n  }\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue() {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n  /** Selects the option. */\n  select(emitEvent = true) {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n  /** Deselects the option. */\n  deselect(emitEvent = true) {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n  /** Sets focus onto this option. */\n  focus(_origin, options) {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles() {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles() {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel() {\n    return this.viewValue;\n  }\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event) {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction() {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n  // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Gets the host DOM element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n  /** Emits the selection change event. */\n  _emitSelectionChangeEvent(isUserInput = false) {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n  static ɵfac = function MatOption_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatOption)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatOption,\n    selectors: [[\"mat-option\"]],\n    viewQuery: function MatOption_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._text = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"option\", 1, \"mat-mdc-option\", \"mdc-list-item\"],\n    hostVars: 11,\n    hostBindings: function MatOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() {\n          return ctx._selectViaInteraction();\n        })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n        i0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled.toString());\n        i0.ɵɵclassProp(\"mdc-list-item--selected\", ctx.selected)(\"mat-mdc-option-multiple\", ctx.multiple)(\"mat-mdc-option-active\", ctx.active)(\"mdc-list-item--disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      id: \"id\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n    },\n    outputs: {\n      onSelectionChange: \"onSelectionChange\"\n    },\n    exportAs: [\"matOption\"],\n    features: [i0.ɵɵInputTransformsFeature],\n    ngContentSelectors: _c4,\n    decls: 8,\n    vars: 5,\n    consts: [[\"text\", \"\"], [\"aria-hidden\", \"true\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\", \"state\"], [1, \"mdc-list-item__primary-text\"], [\"state\", \"checked\", \"aria-hidden\", \"true\", \"appearance\", \"minimal\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\"], [1, \"cdk-visually-hidden\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-mdc-option-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n    template: function MatOption_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c3);\n        i0.ɵɵtemplate(0, MatOption_Conditional_0_Template, 1, 2, \"mat-pseudo-checkbox\", 1);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementStart(2, \"span\", 2, 0);\n        i0.ɵɵprojection(4, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, MatOption_Conditional_5_Template, 1, 1, \"mat-pseudo-checkbox\", 3)(6, MatOption_Conditional_6_Template, 2, 1, \"span\", 4);\n        i0.ɵɵelement(7, \"div\", 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(ctx.multiple ? 0 : -1);\n        i0.ɵɵadvance(5);\n        i0.ɵɵconditional(!ctx.multiple && ctx.selected && !ctx.hideSingleSelectionIndicator ? 5 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx.group && ctx.group._inert ? 6 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n      }\n    },\n    dependencies: [MatPseudoCheckbox, MatRipple],\n    styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatOption, [{\n    type: Component,\n    args: [{\n      selector: 'mat-option',\n      exportAs: 'matOption',\n      host: {\n        'role': 'option',\n        '[class.mdc-list-item--selected]': 'selected',\n        '[class.mat-mdc-option-multiple]': 'multiple',\n        '[class.mat-mdc-option-active]': 'active',\n        '[class.mdc-list-item--disabled]': 'disabled',\n        '[id]': 'id',\n        // Set aria-selected to false for non-selected items and true for selected items. Conform to\n        // [WAI ARIA Listbox authoring practices guide](\n        //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n        // selected option has either aria-selected or aria-checked  set to true. All options that are\n        // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n        // aria-selected implementation of Chips and List components.\n        //\n        // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n        // every option as \"selected\" (#21491).\n        '[attr.aria-selected]': 'selected',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        'class': 'mat-mdc-option mdc-list-item'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [MatPseudoCheckbox, MatRipple],\n      template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\",\n      styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\"]\n    }]\n  }], () => [], {\n    value: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onSelectionChange: [{\n      type: Output\n    }],\n    _text: [{\n      type: ViewChild,\n      args: ['text', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n    return groupCounter;\n  }\n  return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n  return currentScrollPosition;\n}\nclass MatOptionModule {\n  static ɵfac = function MatOptionModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatOptionModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatOptionModule,\n    imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n    exports: [MatOption, MatOptgroup]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatOptionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n      exports: [MatOption, MatOptgroup]\n    }]\n  }], null, null);\n})();\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {\n  capture: true\n};\n/**\n * The events that should trigger the initialization of the ripple.\n * Note that we use `mousedown`, rather than `click`, for mouse devices because\n * we can't rely on `mouseenter` in the shadow DOM and `click` happens too late.\n */\nconst rippleInteractionEvents = ['focus', 'mousedown', 'mouseenter', 'touchstart'];\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\nclass MatRippleLoader {\n  _document = inject(DOCUMENT, {\n    optional: true\n  });\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {\n    optional: true\n  });\n  _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {\n    optional: true\n  });\n  _platform = inject(Platform);\n  _ngZone = inject(NgZone);\n  _injector = inject(Injector);\n  _hosts = new Map();\n  constructor() {\n    this._ngZone.runOutsideAngular(() => {\n      for (const event of rippleInteractionEvents) {\n        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    });\n  }\n  ngOnDestroy() {\n    const hosts = this._hosts.keys();\n    for (const host of hosts) {\n      this.destroyRipple(host);\n    }\n    for (const event of rippleInteractionEvents) {\n      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n    }\n  }\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(host, config) {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, this._globalRippleOptions?.namespace ?? '');\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host, disabled) {\n    const ripple = this._hosts.get(host);\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.target.rippleDisabled = disabled;\n      if (!disabled && !ripple.hasSetUpEvents) {\n        ripple.hasSetUpEvents = true;\n        ripple.renderer.setupTriggerEvents(host);\n      }\n    } else if (disabled) {\n      // Otherwise, set an attribute so we know what the\n      // disabled state should be when the ripple is initialized.\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n  /**\n   * Handles creating and attaching component internals\n   * when a component is initially interacted with.\n   */\n  _onInteraction = event => {\n    const eventTarget = _getEventTarget(event);\n    if (eventTarget instanceof HTMLElement) {\n      // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n      const element = eventTarget.closest(`[${matRippleUninitialized}=\"${this._globalRippleOptions?.namespace ?? ''}\"]`);\n      if (element) {\n        this._createRipple(element);\n      }\n    }\n  };\n  /** Creates a MatRipple and appends it to the given element. */\n  _createRipple(host) {\n    if (!this._document || this._hosts.has(host)) {\n      return;\n    }\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName));\n    host.append(rippleEl);\n    const isNoopAnimations = this._animationMode === 'NoopAnimations';\n    const globalOptions = this._globalRippleOptions;\n    const enterDuration = isNoopAnimations ? 0 : globalOptions?.animation?.enterDuration ?? defaultRippleAnimationConfig.enterDuration;\n    const exitDuration = isNoopAnimations ? 0 : globalOptions?.animation?.exitDuration ?? defaultRippleAnimationConfig.exitDuration;\n    const target = {\n      rippleDisabled: isNoopAnimations || globalOptions?.disabled || host.hasAttribute(matRippleDisabled),\n      rippleConfig: {\n        centered: host.hasAttribute(matRippleCentered),\n        terminateOnPointerUp: globalOptions?.terminateOnPointerUp,\n        animation: {\n          enterDuration,\n          exitDuration\n        }\n      }\n    };\n    const renderer = new RippleRenderer(target, this._ngZone, rippleEl, this._platform, this._injector);\n    const hasSetUpEvents = !target.rippleDisabled;\n    if (hasSetUpEvents) {\n      renderer.setupTriggerEvents(host);\n    }\n    this._hosts.set(host, {\n      target,\n      renderer,\n      hasSetUpEvents\n    });\n    host.removeAttribute(matRippleUninitialized);\n  }\n  destroyRipple(host) {\n    const ripple = this._hosts.get(host);\n    if (ripple) {\n      ripple.renderer._removeTriggerEvents();\n      this._hosts.delete(host);\n    }\n  }\n  static ɵfac = function MatRippleLoader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatRippleLoader)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatRippleLoader,\n    factory: MatRippleLoader.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRippleLoader, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\nclass _MatInternalFormField {\n  /** Position of the label relative to the content. */\n  labelPosition;\n  static ɵfac = function _MatInternalFormField_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _MatInternalFormField)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _MatInternalFormField,\n    selectors: [[\"div\", \"mat-internal-form-field\", \"\"]],\n    hostAttrs: [1, \"mdc-form-field\", \"mat-internal-form-field\"],\n    hostVars: 2,\n    hostBindings: function _MatInternalFormField_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mdc-form-field--align-end\", ctx.labelPosition === \"before\");\n      }\n    },\n    inputs: {\n      labelPosition: \"labelPosition\"\n    },\n    attrs: _c5,\n    ngContentSelectors: _c6,\n    decls: 1,\n    vars: 0,\n    template: function _MatInternalFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-flex;align-items:center;vertical-align:middle}.mat-internal-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mat-internal-form-field>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end .mdc-form-field--align-end label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatInternalFormField, [{\n    type: Component,\n    args: [{\n      selector: 'div[mat-internal-form-field]',\n      template: '<ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mdc-form-field mat-internal-form-field',\n        '[class.mdc-form-field--align-end]': 'labelPosition === \"before\"'\n      },\n      styles: [\".mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-flex;align-items:center;vertical-align:middle}.mat-internal-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mat-internal-form-field>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end .mdc-form-field--align-end label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0}\"]\n    }]\n  }], null, {\n    labelPosition: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleLoader, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, RippleState, ShowOnDirtyErrorStateMatcher, VERSION, _ErrorStateTracker, _MatInternalFormField, _StructuralStylesLoader, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, provideNativeDateAdapter, setLines };","map":{"version":3,"names":["i0","Version","InjectionToken","inject","NgModule","LOCALE_ID","Injectable","Component","ViewEncapsulation","ChangeDetectionStrategy","Directive","ElementRef","ANIMATION_MODULE_TYPE","NgZone","Injector","Input","booleanAttribute","ChangeDetectorRef","EventEmitter","isSignal","Output","ViewChild","HighContrastModeDetector","isFakeMousedownFromScreenReader","isFakeTouchstartFromScreenReader","_IdGenerator","BidiModule","Subject","startWith","normalizePassiveListenerOptions","_getEventTarget","Platform","coerceElement","_CdkPrivateStyleLoader","_VisuallyHiddenLoader","ENTER","SPACE","hasModifierKey","DOCUMENT","_c0","_c1","_c2","_c3","_c4","MatOption_Conditional_0_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","disabled","selected","MatOption_Conditional_5_Template","MatOption_Conditional_6_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","group","label","_c5","_c6","VERSION","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","ACCELERATION_CURVE","SHARP_CURVE","AnimationDurations","COMPLEX","ENTERING","EXITING","MATERIAL_SANITY_CHECKS","providedIn","factory","MatCommonModule","constructor","_applyBodyHighContrastModeCssClasses","ɵfac","MatCommonModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","imports","exports","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","args","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","control","newState","isErrorState","next","MAT_DATE_LOCALE","MAT_DATE_LOCALE_FACTORY","NOT_IMPLEMENTED","DateAdapter","locale","_localeChanges","localeChanges","setTime","target","hours","minutes","seconds","Error","getHours","date","getMinutes","getSeconds","parseTime","value","parseFormat","addSeconds","amount","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","invalid","setLocale","compareDate","first","second","getYear","getMonth","getDate","compareTime","sameDate","firstValid","secondValid","sameTime","clampDate","min","max","MAT_DATE_FORMATS","ISO_8601_REGEX","TIME_REGEX","range","length","valueFunction","valuesArray","Array","i","NativeDateAdapter","useUtcForDisplay","_matDateLocale","optional","matDateLocale","undefined","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf","Intl","DateTimeFormat","month","timeZone","_format","Date","getDateNames","day","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","Locale","firstDay","getWeekInfo","weekInfo","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","result","today","parse","format","displayFormat","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","isNaN","NaN","inRange","setHours","userValue","trim","_parseTimeString","withoutExtras","replace","d","setFullYear","n","slice","setUTCFullYear","setUTCHours","getMilliseconds","parsed","toUpperCase","match","parseInt","amPm","NativeDateAdapter_Factory","ɵprov","ɵɵdefineInjectable","token","MAT_NATIVE_DATE_FORMATS","dateInput","timeInput","display","hour","minute","monthYearLabel","dateA11yLabel","monthYearA11yLabel","timeOptionLabel","NativeDateModule","NativeDateModule_Factory","providers","provide","useClass","MatNativeDateModule","MatNativeDateModule_Factory","provideNativeDateAdapter","formats","useValue","ShowOnDirtyErrorStateMatcher","form","dirty","submitted","ShowOnDirtyErrorStateMatcher_Factory","ErrorStateMatcher","touched","ErrorStateMatcher_Factory","_StructuralStylesLoader","_StructuralStylesLoader_Factory","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","_StructuralStylesLoader_Template","styles","encapsulation","changeDetection","selector","None","OnPush","MatLine","MatLine_Factory","ɵdir","ɵɵdefineDirective","hostAttrs","host","setLines","lines","element","prefix","changes","pipe","subscribe","setClass","className","isAdd","nativeElement","classList","toggle","MatLineModule","MatLineModule_Factory","RippleState","RippleRef","_renderer","config","_animationForciblyDisabledThroughCss","state","HIDDEN","fadeOut","fadeOutRipple","passiveCapturingEventOptions$1","passive","capture","RippleEventManager","_events","Map","addHandler","ngZone","name","handler","handlersForEvent","get","handlersForElement","add","set","Set","runOutsideAngular","document","addEventListener","_delegateEventHandler","removeHandler","delete","size","removeEventListener","event","forEach","handlers","contains","handleEvent","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveCapturingEventOptions","pointerDownEvents","pointerUpEvents","_MatRippleStylesLoader","_MatRippleStylesLoader_Factory","_MatRippleStylesLoader_Template","RippleRenderer","_target","_ngZone","_platform","_containerElement","_triggerElement","_isPointerDown","_activeRipples","_mostRecentTransientRipple","_lastTouchStartEvent","_pointerUpEventsRegistered","_containerRect","_eventManager","elementOrElementRef","injector","isBrowser","load","fadeInRipple","x","y","containerRect","getBoundingClientRect","animationConfig","animation","centered","left","width","top","height","radius","distanceToFurthestCorner","offsetX","offsetY","ripple","createElement","color","backgroundColor","transitionDuration","appendChild","computedStyles","window","getComputedStyle","userTransitionProperty","transitionProperty","userTransitionDuration","animationForciblyDisabledThroughCss","rippleRef","transform","FADING_IN","persistent","eventListeners","onTransitionEnd","fallbackTimer","clearTimeout","_finishRippleTransition","onTransitionCancel","_destroyRipple","setTimeout","FADING_OUT","rippleEl","opacity","fadeOutAll","_getActiveRipples","fadeOutAllNonPersistent","setupTriggerEvents","_removeTriggerEvents","_onMousedown","_onTouchStart","_onPointerUp","_startFadeOutTransition","isMostRecentTransientRipple","VISIBLE","remove","isFakeMousedown","isSyntheticEvent","now","rippleDisabled","clientX","clientY","rippleConfig","touches","changedTouches","isVisible","terminateOnPointerUp","from","keys","trigger","rect","distX","Math","abs","right","distY","bottom","sqrt","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","_elementRef","_animationMode","unbounded","_disabled","_setupTriggerEventsIfEnabled","_trigger","_rippleRenderer","_globalOptions","_isInitialized","platform","globalOptions","ngOnInit","ngOnDestroy","launch","configOrX","MatRipple_Factory","hostVars","hostBindings","MatRipple_HostBindings","ɵɵclassProp","inputs","exportAs","MatRippleModule","MatRippleModule_Factory","MatPseudoCheckbox","appearance","MatPseudoCheckbox_Factory","MatPseudoCheckbox_HostBindings","MatPseudoCheckbox_Template","MatPseudoCheckboxModule","MatPseudoCheckboxModule_Factory","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOptgroup","_labelId","getId","_inert","inertGroups","MatOptgroup_Factory","MatOptgroup_HostBindings","ɵɵattribute","toString","features","ɵɵProvidersFeature","useExisting","ɵɵInputTransformsFeature","ngContentSelectors","consts","MatOptgroup_Template","ɵɵprojectionDef","ɵɵprojection","MatOptionSelectionChange","source","isUserInput","MatOption","_element","_changeDetectorRef","_parent","_signalDisableRipple","_selected","_active","_mostRecentViewValue","multiple","id","disableRipple","hideSingleSelectionIndicator","onSelectionChange","_text","active","viewValue","textContent","select","emitEvent","markForCheck","_emitSelectionChangeEvent","deselect","focus","_origin","options","_getHostElement","setActiveStyles","setInactiveStyles","getLabel","_handleKeydown","keyCode","_selectViaInteraction","preventDefault","_getTabIndex","ngAfterViewChecked","complete","emit","MatOption_Factory","viewQuery","MatOption_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatOption_HostBindings","ɵɵlistener","MatOption_click_HostBindingHandler","MatOption_keydown_HostBindingHandler","$event","ɵɵhostProperty","outputs","MatOption_Template","ɵɵtemplate","ɵɵconditional","dependencies","static","_countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","_getOptionScrollPosition","optionOffset","optionHeight","currentScrollPosition","panelHeight","MatOptionModule","MatOptionModule_Factory","eventListenerOptions","rippleInteractionEvents","matRippleUninitialized","matRippleClassName","matRippleCentered","matRippleDisabled","MatRippleLoader","_document","_globalRippleOptions","_injector","_hosts","_onInteraction","hosts","destroyRipple","configureRipple","setAttribute","namespace","hasAttribute","setDisabled","hasSetUpEvents","renderer","removeAttribute","eventTarget","HTMLElement","closest","_createRipple","has","querySelector","getAttribute","append","isNoopAnimations","MatRippleLoader_Factory","_MatInternalFormField","labelPosition","_MatInternalFormField_Factory","_MatInternalFormField_HostBindings","attrs","_MatInternalFormField_Template","required"],"sources":["C:/School/PXL/2024-2025/Fullstack Java/Opdracht/Code/project-WesleyKissenPXL/frontend-web/node_modules/@angular/material/fesm2022/core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Version, InjectionToken, inject, NgModule, LOCALE_ID, Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, ElementRef, ANIMATION_MODULE_TYPE, NgZone, Injector, Input, booleanAttribute, ChangeDetectorRef, EventEmitter, isSignal, Output, ViewChild } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, _IdGenerator } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { normalizePassiveListenerOptions, _getEventTarget, Platform } from '@angular/cdk/platform';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\n\n/** Current version of Angular Material. */\nconst VERSION = new Version('19.0.5');\n\n/** @docs-private */\nclass AnimationCurves {\n    static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n    static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n    static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n    static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n/** @docs-private */\nclass AnimationDurations {\n    static COMPLEX = '375ms';\n    static ENTERING = '225ms';\n    static EXITING = '195ms';\n}\n\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: () => true,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nclass MatCommonModule {\n    constructor() {\n        // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n        // in MatCommonModule.\n        inject(HighContrastModeDetector)._applyBodyHighContrastModeCssClasses();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCommonModule, imports: [BidiModule], exports: [BidiModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCommonModule, imports: [BidiModule, BidiModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule],\n                    exports: [BidiModule],\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\nconst NOT_IMPLEMENTED = 'Method not implemented';\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    /** The locale to use for all dates. */\n    locale;\n    _localeChanges = new Subject();\n    /** A stream that emits when the locale changes. */\n    localeChanges = this._localeChanges;\n    /**\n     * Sets the time of one date to the time of another.\n     * @param target Date whose time will be set.\n     * @param hours New hours to set on the date object.\n     * @param minutes New minutes to set on the date object.\n     * @param seconds New seconds to set on the date object.\n     */\n    setTime(target, hours, minutes, seconds) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Gets the hours component of the given date.\n     * @param date The date to extract the hours from.\n     */\n    getHours(date) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Gets the minutes component of the given date.\n     * @param date The date to extract the minutes from.\n     */\n    getMinutes(date) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Gets the seconds component of the given date.\n     * @param date The date to extract the seconds from.\n     */\n    getSeconds(date) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Parses a date with a specific time from a user-provided value.\n     * @param value The value to parse.\n     * @param parseFormat The expected format of the value being parsed\n     *     (type is implementation-dependent).\n     */\n    parseTime(value, parseFormat) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Adds an amount of seconds to the specified date.\n     * @param date Date to which to add the seconds.\n     * @param amount Amount of seconds to add to the date.\n     */\n    addSeconds(date, amount) {\n        throw new Error(NOT_IMPLEMENTED);\n    }\n    /**\n     * Given a potential date object, returns that same date object if it is\n     * a valid date, or `null` if it's not a valid date.\n     * @param obj The object to check.\n     * @returns A date or `null`.\n     */\n    getValidDateOrNull(obj) {\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return (this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second));\n    }\n    /**\n     * Compares the time values of two dates.\n     * @param first First date to compare.\n     * @param second Second date to compare.\n     * @returns 0 if the times are equal, a number less than 0 if the first time is earlier,\n     *     a number greater than 0 if the first time is later.\n     */\n    compareTime(first, second) {\n        return (this.getHours(first) - this.getHours(second) ||\n            this.getMinutes(first) - this.getMinutes(second) ||\n            this.getSeconds(first) - this.getSeconds(second));\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Checks if the times of two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the times of the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameTime(first, second) {\n        if (first && second) {\n            const firstValid = this.isValid(first);\n            const secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareTime(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings with an out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Matches a time string. Supported formats:\n * - {{hours}}:{{minutes}}\n * - {{hours}}:{{minutes}}:{{seconds}}\n * - {{hours}}:{{minutes}} AM/PM\n * - {{hours}}:{{minutes}}:{{seconds}} AM/PM\n * - {{hours}}.{{minutes}}\n * - {{hours}}.{{minutes}}.{{seconds}}\n * - {{hours}}.{{minutes}} AM/PM\n * - {{hours}}.{{minutes}}.{{seconds}} AM/PM\n */\nconst TIME_REGEX = /^(\\d?\\d)[:.](\\d?\\d)(?:[:.](\\d?\\d))?\\s*(AM|PM)?$/i;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    useUtcForDisplay = false;\n    /** The injected locale. */\n    _matDateLocale = inject(MAT_DATE_LOCALE, { optional: true });\n    constructor() {\n        super();\n        const matDateLocale = inject(MAT_DATE_LOCALE, { optional: true });\n        if (matDateLocale !== undefined) {\n            this._matDateLocale = matDateLocale;\n        }\n        super.setLocale(this._matDateLocale);\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n        return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n        const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n        return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n        return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n        return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n        // At the time of writing `Intl.Locale` isn't available\n        // in the internal types so we need to cast to `any`.\n        if (typeof Intl !== 'undefined' && Intl.Locale) {\n            const locale = new Intl.Locale(this.locale);\n            // Some browsers implement a `getWeekInfo` method while others have a `weekInfo` getter.\n            // Note that this isn't supported in all browsers so we need to null check it.\n            const firstDay = (locale.getWeekInfo?.() || locale.weekInfo)?.firstDay ?? 0;\n            // `weekInfo.firstDay` is a number between 1 and 7 where, starting from Monday,\n            // whereas our representation is 0 to 6 where 0 is Sunday so we need to normalize it.\n            return firstDay === 7 ? 0 : firstDay;\n        }\n        // Default to Sunday if the browser doesn't provide the week information.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value, parseFormat) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        const dtf = new Intl.DateTimeFormat(this.locale, { ...displayFormat, timeZone: 'utc' });\n        return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate()),\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    setTime(target, hours, minutes, seconds) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!inRange(hours, 0, 23)) {\n                throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n            }\n            if (!inRange(minutes, 0, 59)) {\n                throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n            }\n            if (!inRange(seconds, 0, 59)) {\n                throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n            }\n        }\n        const clone = this.clone(target);\n        clone.setHours(hours, minutes, seconds, 0);\n        return clone;\n    }\n    getHours(date) {\n        return date.getHours();\n    }\n    getMinutes(date) {\n        return date.getMinutes();\n    }\n    getSeconds(date) {\n        return date.getSeconds();\n    }\n    parseTime(userValue, parseFormat) {\n        if (typeof userValue !== 'string') {\n            return userValue instanceof Date ? new Date(userValue.getTime()) : null;\n        }\n        const value = userValue.trim();\n        if (value.length === 0) {\n            return null;\n        }\n        // Attempt to parse the value directly.\n        let result = this._parseTimeString(value);\n        // Some locales add extra characters around the time, but are otherwise parseable\n        // (e.g. `00:05 ч.` in bg-BG). Try replacing all non-number and non-colon characters.\n        if (result === null) {\n            const withoutExtras = value.replace(/[^0-9:(AM|PM)]/gi, '').trim();\n            if (withoutExtras.length > 0) {\n                result = this._parseTimeString(withoutExtras);\n            }\n        }\n        return result || this.invalid();\n    }\n    addSeconds(date, amount) {\n        return new Date(date.getTime() + amount * 1000);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setFullYear` and `setHours` instead.\n        const d = new Date();\n        d.setFullYear(year, month, date);\n        d.setHours(0, 0, 0, 0);\n        return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n        const d = new Date();\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return dtf.format(d);\n    }\n    /**\n     * Attempts to parse a time string into a date object. Returns null if it cannot be parsed.\n     * @param value Time string to parse.\n     */\n    _parseTimeString(value) {\n        // Note: we can technically rely on the browser for the time parsing by generating\n        // an ISO string and appending the string to the end of it. We don't do it, because\n        // browsers aren't consistent in what they support. Some examples:\n        // - Safari doesn't support AM/PM.\n        // - Firefox produces a valid date object if the time string has overflows (e.g. 12:75) while\n        //   other browsers produce an invalid date.\n        // - Safari doesn't allow padded numbers.\n        const parsed = value.toUpperCase().match(TIME_REGEX);\n        if (parsed) {\n            let hours = parseInt(parsed[1]);\n            const minutes = parseInt(parsed[2]);\n            let seconds = parsed[3] == null ? undefined : parseInt(parsed[3]);\n            const amPm = parsed[4];\n            if (hours === 12) {\n                hours = amPm === 'AM' ? 0 : hours;\n            }\n            else if (amPm === 'PM') {\n                hours += 12;\n            }\n            if (inRange(hours, 0, 23) &&\n                inRange(minutes, 0, 59) &&\n                (seconds == null || inRange(seconds, 0, 59))) {\n                return this.setTime(this.today(), hours, minutes, seconds || 0);\n            }\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateAdapter });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n/** Checks whether a number is within a certain range. */\nfunction inRange(value, min, max) {\n    return !isNaN(value) && value >= min && value <= max;\n}\n\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n        timeInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        timeInput: { hour: 'numeric', minute: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n        timeOptionLabel: { hour: 'numeric', minute: 'numeric' },\n    },\n};\n\nclass NativeDateModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateModule, providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }],\n                }]\n        }] });\nclass MatNativeDateModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNativeDateModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNativeDateModule, providers: [provideNativeDateAdapter()] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [provideNativeDateAdapter()],\n                }]\n        }] });\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n    return [\n        { provide: DateAdapter, useClass: NativeDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: formats },\n    ];\n}\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Component used to load structural styles for focus indicators.\n * @docs-private\n */\nclass _StructuralStylesLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _StructuralStylesLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _StructuralStylesLoader, isStandalone: true, selector: \"structural-styles\", ngImport: i0, template: '', isInline: true, styles: [\".mat-focus-indicator{position:relative}.mat-focus-indicator::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;display:var(--mat-focus-indicator-display, none);border-width:var(--mat-focus-indicator-border-width, 3px);border-style:var(--mat-focus-indicator-border-style, solid);border-color:var(--mat-focus-indicator-border-color, transparent);border-radius:var(--mat-focus-indicator-border-radius, 4px)}.mat-focus-indicator:focus::before{content:\\\"\\\"}@media(forced-colors: active){html{--mat-focus-indicator-display: block}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _StructuralStylesLoader, decorators: [{\n            type: Component,\n            args: [{ selector: 'structural-styles', encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-focus-indicator{position:relative}.mat-focus-indicator::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;display:var(--mat-focus-indicator-display, none);border-width:var(--mat-focus-indicator-border-width, 3px);border-style:var(--mat-focus-indicator-border-style, solid);border-color:var(--mat-focus-indicator-border-color, transparent);border-radius:var(--mat-focus-indicator-border-radius, 4px)}.mat-focus-indicator:focus::before{content:\\\"\\\"}@media(forced-colors: active){html{--mat-focus-indicator-display: block}}\"] }]\n        }] });\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLine, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatLine, isStandalone: true, selector: \"[mat-line], [matLine]\", host: { classAttribute: \"mat-line\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLine, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-line], [matLine]',\n                    host: { 'class': 'mat-line' },\n                }]\n        }] });\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatLine], exports: [MatLine, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatLineModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatLine],\n                    exports: [MatLine, MatCommonModule],\n                }]\n        }] });\n\n/** Possible states for a ripple element. */\nvar RippleState;\n(function (RippleState) {\n    RippleState[RippleState[\"FADING_IN\"] = 0] = \"FADING_IN\";\n    RippleState[RippleState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n    RippleState[RippleState[\"FADING_OUT\"] = 2] = \"FADING_OUT\";\n    RippleState[RippleState[\"HIDDEN\"] = 3] = \"HIDDEN\";\n})(RippleState || (RippleState = {}));\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    _renderer;\n    element;\n    config;\n    _animationForciblyDisabledThroughCss;\n    /** Current state of the ripple. */\n    state = RippleState.HIDDEN;\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config, \n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    _animationForciblyDisabledThroughCss = false) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nclass RippleEventManager {\n    _events = new Map();\n    /** Adds an event handler. */\n    addHandler(ngZone, name, element, handler) {\n        const handlersForEvent = this._events.get(name);\n        if (handlersForEvent) {\n            const handlersForElement = handlersForEvent.get(element);\n            if (handlersForElement) {\n                handlersForElement.add(handler);\n            }\n            else {\n                handlersForEvent.set(element, new Set([handler]));\n            }\n        }\n        else {\n            this._events.set(name, new Map([[element, new Set([handler])]]));\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n            });\n        }\n    }\n    /** Removes an event handler. */\n    removeHandler(name, element, handler) {\n        const handlersForEvent = this._events.get(name);\n        if (!handlersForEvent) {\n            return;\n        }\n        const handlersForElement = handlersForEvent.get(element);\n        if (!handlersForElement) {\n            return;\n        }\n        handlersForElement.delete(handler);\n        if (handlersForElement.size === 0) {\n            handlersForEvent.delete(element);\n        }\n        if (handlersForEvent.size === 0) {\n            this._events.delete(name);\n            document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);\n        }\n    }\n    /** Event handler that is bound and which dispatches the events to the different targets. */\n    _delegateEventHandler = (event) => {\n        const target = _getEventTarget(event);\n        if (target) {\n            this._events.get(event.type)?.forEach((handlers, element) => {\n                if (element === target || element.contains(target)) {\n                    handlers.forEach(handler => handler.handleEvent(event));\n                }\n            });\n        }\n    };\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 225,\n    exitDuration: 150,\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\nclass _MatRippleStylesLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatRippleStylesLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _MatRippleStylesLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"mat-ripple-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\".mat-ripple{overflow:hidden;position:relative}.mat-ripple:not(:empty){transform:translateZ(0)}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;transition:opacity,transform 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale3d(0, 0, 0);background-color:var(--mat-ripple-color, color-mix(in srgb, var(--mat-sys-on-surface) 10%, transparent))}@media(forced-colors: active){.mat-ripple-element{display:none}}.cdk-drag-preview .mat-ripple-element,.cdk-drag-placeholder .mat-ripple-element{display:none}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatRippleStylesLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'mat-ripple-style-loader': '' }, styles: [\".mat-ripple{overflow:hidden;position:relative}.mat-ripple:not(:empty){transform:translateZ(0)}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;transition:opacity,transform 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale3d(0, 0, 0);background-color:var(--mat-ripple-color, color-mix(in srgb, var(--mat-sys-on-surface) 10%, transparent))}@media(forced-colors: active){.mat-ripple-element{display:none}}.cdk-drag-preview .mat-ripple-element,.cdk-drag-placeholder .mat-ripple-element{display:none}\"] }]\n        }] });\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    _target;\n    _ngZone;\n    _platform;\n    /** Element where the ripples are being added to. */\n    _containerElement;\n    /** Element which triggers the ripple elements on mouse events. */\n    _triggerElement;\n    /** Whether the pointer is currently down or not. */\n    _isPointerDown = false;\n    /**\n     * Map of currently active ripple references.\n     * The ripple reference is mapped to its element event listeners.\n     * The reason why `| null` is used is that event listeners are added only\n     * when the condition is truthy (see the `_startFadeOutTransition` method).\n     */\n    _activeRipples = new Map();\n    /** Latest non-persistent ripple that was triggered. */\n    _mostRecentTransientRipple;\n    /** Time in milliseconds when the last touchstart event happened. */\n    _lastTouchStartEvent;\n    /** Whether pointer-up event listeners have been registered. */\n    _pointerUpEventsRegistered = false;\n    /**\n     * Cached dimensions of the ripple container. Set when the first\n     * ripple is shown and cleared once no more ripples are visible.\n     */\n    _containerRect;\n    static _eventManager = new RippleEventManager();\n    constructor(_target, _ngZone, elementOrElementRef, _platform, injector) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        // Only do anything if we're on the browser.\n        if (_platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n        if (injector) {\n            injector.get(_CdkPrivateStyleLoader).load(_MatRippleStylesLoader);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = (this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect());\n        const animationConfig = { ...defaultRippleAnimationConfig, ...config.animation };\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const enterDuration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${enterDuration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical to ensure that the `scale` animates properly.\n        // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n        // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n        const computedStyles = window.getComputedStyle(ripple);\n        const userTransitionProperty = computedStyles.transitionProperty;\n        const userTransitionDuration = computedStyles.transitionDuration;\n        // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n        // `transition: none` or `display: none`). This is technically unexpected since animations are\n        // controlled through the animation config, but this exists for backwards compatibility. This\n        // logic does not need to be super accurate since it covers some edge cases which can be easily\n        // avoided by users.\n        const animationForciblyDisabledThroughCss = userTransitionProperty === 'none' ||\n            // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n            // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n            userTransitionDuration === '0s' ||\n            userTransitionDuration === '0s, 0s' ||\n            // If the container is 0x0, it's likely `display: none`.\n            (containerRect.width === 0 && containerRect.height === 0);\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n        // Start the enter animation by setting the transform/scale to 100%. The animation will\n        // execute as part of this statement because we forced a style recalculation before.\n        // Note: We use a 3d transform here in order to avoid an issue in Safari where\n        // the ripples aren't clipped when inside the shadow DOM (see #24028).\n        ripple.style.transform = 'scale3d(1, 1, 1)';\n        rippleRef.state = RippleState.FADING_IN;\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        let eventListeners = null;\n        // Do not register the `transition` event listener if fade-in and fade-out duration\n        // are set to zero. The events won't fire anyway and we can save resources here.\n        if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n            this._ngZone.runOutsideAngular(() => {\n                const onTransitionEnd = () => {\n                    // Clear the fallback timer since the transition fired correctly.\n                    if (eventListeners) {\n                        eventListeners.fallbackTimer = null;\n                    }\n                    clearTimeout(fallbackTimer);\n                    this._finishRippleTransition(rippleRef);\n                };\n                const onTransitionCancel = () => this._destroyRipple(rippleRef);\n                // In some cases where there's a higher load on the browser, it can choose not to dispatch\n                // neither `transitionend` nor `transitioncancel` (see b/227356674). This timer serves as a\n                // fallback for such cases so that the ripple doesn't become stuck. We add a 100ms buffer\n                // because timers aren't precise. Note that another approach can be to transition the ripple\n                // to the `VISIBLE` state immediately above and to `FADING_IN` afterwards inside\n                // `transitionstart`. We go with the timer because it's one less event listener and\n                // it's less likely to break existing tests.\n                const fallbackTimer = setTimeout(onTransitionCancel, enterDuration + 100);\n                ripple.addEventListener('transitionend', onTransitionEnd);\n                // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n                // directly as otherwise we would keep it part of the ripple container forever.\n                // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n                ripple.addEventListener('transitioncancel', onTransitionCancel);\n                eventListeners = { onTransitionEnd, onTransitionCancel, fallbackTimer };\n            });\n        }\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.set(rippleRef, eventListeners);\n        // In case there is no fade-in transition duration, we need to manually call the transition\n        // end listener because `transitionend` doesn't fire if there is no transition.\n        if (animationForciblyDisabledThroughCss || !enterDuration) {\n            this._finishRippleTransition(rippleRef);\n        }\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        // For ripples already fading out or hidden, this should be a noop.\n        if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = { ...defaultRippleAnimationConfig, ...rippleRef.config.animation };\n        // This starts the fade-out transition and will fire the transition end listener that\n        // removes the ripple element from the DOM.\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // In case there is no fade-out transition duration, we need to manually call the\n        // transition end listener because `transitionend` doesn't fire if there is no transition.\n        if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n            this._finishRippleTransition(rippleRef);\n        }\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n    }\n    /** Fades out all currently active non-persistent ripples. */\n    fadeOutAllNonPersistent() {\n        this._getActiveRipples().forEach(ripple => {\n            if (!ripple.config.persistent) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        // Use event delegation for the trigger events since they're\n        // set up during creation and are performance-sensitive.\n        pointerDownEvents.forEach(type => {\n            RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n        });\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            // The events for hiding the ripple are bound directly on the trigger, because:\n            // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n            // delegation will be diminished by having to look through all the data structures often.\n            // 2. They aren't as performance-sensitive, because they're bound only after the user\n            // has interacted with an element.\n            this._ngZone.runOutsideAngular(() => {\n                pointerUpEvents.forEach(type => {\n                    this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);\n                });\n            });\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Method that will be called if the fade-in or fade-in transition completed. */\n    _finishRippleTransition(rippleRef) {\n        if (rippleRef.state === RippleState.FADING_IN) {\n            this._startFadeOutTransition(rippleRef);\n        }\n        else if (rippleRef.state === RippleState.FADING_OUT) {\n            this._destroyRipple(rippleRef);\n        }\n    }\n    /**\n     * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n     * is not held down anymore.\n     */\n    _startFadeOutTransition(rippleRef) {\n        const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n        const { persistent } = rippleRef.config;\n        rippleRef.state = RippleState.VISIBLE;\n        // When the timer runs out while the user has kept their pointer down, we want to\n        // keep only the persistent ripples and the latest transient ripple. We do this,\n        // because we don't want stacked transient ripples to appear after their enter\n        // animation has finished.\n        if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n            rippleRef.fadeOut();\n        }\n    }\n    /** Destroys the given ripple by removing it from the DOM and updating its state. */\n    _destroyRipple(rippleRef) {\n        const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n        this._activeRipples.delete(rippleRef);\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // If the current ref is the most recent transient ripple, unset it\n        // avoid memory leaks.\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        rippleRef.state = RippleState.HIDDEN;\n        if (eventListeners !== null) {\n            rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n            rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n            if (eventListeners.fallbackTimer !== null) {\n                clearTimeout(eventListeners.fallbackTimer);\n            }\n        }\n        rippleRef.element.remove();\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            // According to the typings the touches should always be defined, but in some cases\n            // the browser appears to not assign them in tests which leads to flakes.\n            if (touches) {\n                for (let i = 0; i < touches.length; i++) {\n                    this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n                }\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._getActiveRipples().forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === RippleState.VISIBLE ||\n                (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    _getActiveRipples() {\n        return Array.from(this._activeRipples.keys());\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        const trigger = this._triggerElement;\n        if (trigger) {\n            pointerDownEvents.forEach(type => RippleRenderer._eventManager.removeHandler(type, trigger, this));\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach(type => trigger.removeEventListener(type, this, passiveCapturingEventOptions));\n                this._pointerUpEventsRegistered = false;\n            }\n        }\n    }\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    _elementRef = inject(ElementRef);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** Custom color for all ripples. */\n    color;\n    /** Whether the ripples should be visible outside the component's bounds. */\n    unbounded;\n    /**\n     * Whether the ripple always originates from the center of the host element's bounds, rather\n     * than originating from the location of the click event.\n     */\n    centered;\n    /**\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\n     * bounding rectangle.\n     */\n    radius = 0;\n    /**\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\n     * duration of the ripples. The animation durations will be overwritten if the\n     * `NoopAnimationsModule` is being used.\n     */\n    animation;\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        if (value) {\n            this.fadeOutAllNonPersistent();\n        }\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    _disabled = false;\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() {\n        return this._trigger || this._elementRef.nativeElement;\n    }\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    _trigger;\n    /** Renderer for the ripple DOM manipulations. */\n    _rippleRenderer;\n    /** Options that are set globally for all ripples. */\n    _globalOptions;\n    /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n    _isInitialized = false;\n    constructor() {\n        const ngZone = inject(NgZone);\n        const platform = inject(Platform);\n        const globalOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, { optional: true });\n        const injector = inject(Injector);\n        // Note: cannot use `inject()` here, because this class\n        // gets instantiated manually in the ripple loader.\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, this._elementRef, platform, injector);\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n        this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: {\n                ...this._globalOptions.animation,\n                ...(this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {}),\n                ...this.animation,\n            },\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, { ...this.rippleConfig, ...config });\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, { ...this.rippleConfig, ...configOrX });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRipple, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatRipple, isStandalone: true, selector: \"[mat-ripple], [matRipple]\", inputs: { color: [\"matRippleColor\", \"color\"], unbounded: [\"matRippleUnbounded\", \"unbounded\"], centered: [\"matRippleCentered\", \"centered\"], radius: [\"matRippleRadius\", \"radius\"], animation: [\"matRippleAnimation\", \"animation\"], disabled: [\"matRippleDisabled\", \"disabled\"], trigger: [\"matRippleTrigger\", \"trigger\"] }, host: { properties: { \"class.mat-ripple-unbounded\": \"unbounded\" }, classAttribute: \"mat-ripple\" }, exportAs: [\"matRipple\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRipple, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-ripple], [matRipple]',\n                    exportAs: 'matRipple',\n                    host: {\n                        'class': 'mat-ripple',\n                        '[class.mat-ripple-unbounded]': 'unbounded',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matRippleColor']\n            }], unbounded: [{\n                type: Input,\n                args: ['matRippleUnbounded']\n            }], centered: [{\n                type: Input,\n                args: ['matRippleCentered']\n            }], radius: [{\n                type: Input,\n                args: ['matRippleRadius']\n            }], animation: [{\n                type: Input,\n                args: ['matRippleAnimation']\n            }], disabled: [{\n                type: Input,\n                args: ['matRippleDisabled']\n            }], trigger: [{\n                type: Input,\n                args: ['matRippleTrigger']\n            }] } });\n\nclass MatRippleModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleModule, imports: [MatCommonModule, MatRipple], exports: [MatRipple, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRipple],\n                    exports: [MatRipple, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** Display state of the checkbox. */\n    state = 'unchecked';\n    /** Whether the checkbox is disabled. */\n    disabled = false;\n    /**\n     * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n     * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n     */\n    appearance = 'full';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckbox, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatPseudoCheckbox, isStandalone: true, selector: \"mat-pseudo-checkbox\", inputs: { state: \"state\", disabled: \"disabled\", appearance: \"appearance\" }, host: { properties: { \"class.mat-pseudo-checkbox-indeterminate\": \"state === \\\"indeterminate\\\"\", \"class.mat-pseudo-checkbox-checked\": \"state === \\\"checked\\\"\", \"class.mat-pseudo-checkbox-disabled\": \"disabled\", \"class.mat-pseudo-checkbox-minimal\": \"appearance === \\\"minimal\\\"\", \"class.mat-pseudo-checkbox-full\": \"appearance === \\\"full\\\"\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-pseudo-checkbox\" }, ngImport: i0, template: '', isInline: true, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckbox, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'mat-pseudo-checkbox', template: '', host: {\n                        'class': 'mat-pseudo-checkbox',\n                        '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                        '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                        '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                        '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n                        '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, styles: [\".mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-primary))}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color, var(--mat-sys-on-surface-variant));border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color, var(--mat-sys-primary));border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color, var(--mat-sys-on-primary))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color, var(--mat-sys-surface))}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}\"] }]\n        }], ctorParameters: () => [], propDecorators: { state: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }] } });\n\nclass MatPseudoCheckboxModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule, MatPseudoCheckbox], exports: [MatPseudoCheckbox] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatPseudoCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatPseudoCheckbox],\n                    exports: [MatPseudoCheckbox],\n                }]\n        }] });\n\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup {\n    /** Label for the option group. */\n    label;\n    /** whether the option group is disabled. */\n    disabled = false;\n    /** Unique id for the underlying label. */\n    _labelId = inject(_IdGenerator).getId('mat-optgroup-label-');\n    /** Whether the group is in inert a11y mode. */\n    _inert;\n    constructor() {\n        const parent = inject(MAT_OPTION_PARENT_COMPONENT, { optional: true });\n        this._inert = parent?.inertGroups ?? false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptgroup, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatOptgroup, isStandalone: true, selector: \"mat-optgroup\", inputs: { label: \"label\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, host: { properties: { \"attr.role\": \"_inert ? null : \\\"group\\\"\", \"attr.aria-disabled\": \"_inert ? null : disabled.toString()\", \"attr.aria-labelledby\": \"_inert ? null : _labelId\" }, classAttribute: \"mat-mdc-optgroup\" }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], exportAs: [\"matOptgroup\"], ngImport: i0, template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptgroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-optgroup', exportAs: 'matOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-optgroup',\n                        '[attr.role]': '_inert ? null : \"group\"',\n                        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n                        '[attr.aria-labelledby]': '_inert ? null : _labelId',\n                    }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], template: \"<span\\n  class=\\\"mat-mdc-optgroup-label\\\"\\n  role=\\\"presentation\\\"\\n  [class.mdc-list-item--disabled]=\\\"disabled\\\"\\n  [id]=\\\"_labelId\\\">\\n  <span class=\\\"mdc-list-item__primary-text\\\">{{ label }} <ng-content></ng-content></span>\\n</span>\\n\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color, var(--mat-sys-on-surface-variant));font-family:var(--mat-optgroup-label-text-font, var(--mat-sys-title-small-font));line-height:var(--mat-optgroup-label-text-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-optgroup-label-text-size, var(--mat-sys-title-small-size));letter-spacing:var(--mat-optgroup-label-text-tracking, var(--mat-sys-title-small-tracking));font-weight:var(--mat-optgroup-label-text-weight, var(--mat-sys-title-small-weight))}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;outline:none}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal;color:inherit}\"] }]\n        }], ctorParameters: () => [], propDecorators: { label: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    source;\n    isUserInput;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption {\n    _element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _parent = inject(MAT_OPTION_PARENT_COMPONENT, { optional: true });\n    group = inject(MAT_OPTGROUP, { optional: true });\n    _signalDisableRipple = false;\n    _selected = false;\n    _active = false;\n    _disabled = false;\n    _mostRecentViewValue = '';\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n        return this._selected;\n    }\n    /** The form value of the option. */\n    value;\n    /** The unique ID of the option. */\n    id = inject(_IdGenerator).getId('mat-option-');\n    /** Whether the option is disabled. */\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._signalDisableRipple\n            ? this._parent.disableRipple()\n            : !!this._parent?.disableRipple;\n    }\n    /** Whether to display checkmark for single-selection. */\n    get hideSingleSelectionIndicator() {\n        return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n    }\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    onSelectionChange = new EventEmitter();\n    /** Element containing the option's text. */\n    _text;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    _stateChanges = new Subject();\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        this._signalDisableRipple = !!this._parent && isSignal(this._parent.disableRipple);\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._text?.nativeElement.textContent || '').trim();\n    }\n    /** Selects the option. */\n    select(emitEvent = true) {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Deselects the option. */\n    deselect(emitEvent = true) {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            if (emitEvent) {\n                this._emitSelectionChangeEvent();\n            }\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n    // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n    // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                if (this._mostRecentViewValue) {\n                    this._stateChanges.next();\n                }\n                this._mostRecentViewValue = viewValue;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOption, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatOption, isStandalone: true, selector: \"mat-option\", inputs: { value: \"value\", id: \"id\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { onSelectionChange: \"onSelectionChange\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_selectViaInteraction()\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"class.mdc-list-item--selected\": \"selected\", \"class.mat-mdc-option-multiple\": \"multiple\", \"class.mat-mdc-option-active\": \"active\", \"class.mdc-list-item--disabled\": \"disabled\", \"id\": \"id\", \"attr.aria-selected\": \"selected\", \"attr.aria-disabled\": \"disabled.toString()\" }, classAttribute: \"mat-mdc-option mdc-list-item\" }, viewQueries: [{ propertyName: \"_text\", first: true, predicate: [\"text\"], descendants: true, static: true }], exportAs: [\"matOption\"], ngImport: i0, template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\"], dependencies: [{ kind: \"component\", type: MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\", \"appearance\"] }, { kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOption, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-option', exportAs: 'matOption', host: {\n                        'role': 'option',\n                        '[class.mdc-list-item--selected]': 'selected',\n                        '[class.mat-mdc-option-multiple]': 'multiple',\n                        '[class.mat-mdc-option-active]': 'active',\n                        '[class.mdc-list-item--disabled]': 'disabled',\n                        '[id]': 'id',\n                        // Set aria-selected to false for non-selected items and true for selected items. Conform to\n                        // [WAI ARIA Listbox authoring practices guide](\n                        //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n                        // selected option has either aria-selected or aria-checked  set to true. All options that are\n                        // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n                        // aria-selected implementation of Chips and List components.\n                        //\n                        // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n                        // every option as \"selected\" (#21491).\n                        '[attr.aria-selected]': 'selected',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '(click)': '_selectViaInteraction()',\n                        '(keydown)': '_handleKeydown($event)',\n                        'class': 'mat-mdc-option mdc-list-item',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, imports: [MatPseudoCheckbox, MatRipple], template: \"<!-- Set aria-hidden=\\\"true\\\" to this DOM node and other decorative nodes in this file. This might\\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\\n@if (multiple) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n        aria-hidden=\\\"true\\\"></mat-pseudo-checkbox>\\n}\\n\\n<ng-content select=\\\"mat-icon\\\"></ng-content>\\n\\n<span class=\\\"mdc-list-item__primary-text\\\" #text><ng-content></ng-content></span>\\n\\n<!-- Render checkmark at the end for single-selection. -->\\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\\n    <mat-pseudo-checkbox\\n        class=\\\"mat-mdc-option-pseudo-checkbox\\\"\\n        [disabled]=\\\"disabled\\\"\\n        state=\\\"checked\\\"\\n        aria-hidden=\\\"true\\\"\\n        appearance=\\\"minimal\\\"></mat-pseudo-checkbox>\\n}\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n@if (group && group._inert) {\\n    <span class=\\\"cdk-visually-hidden\\\">({{ group.label }})</span>\\n}\\n\\n<div class=\\\"mat-mdc-option-ripple mat-focus-indicator\\\" aria-hidden=\\\"true\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-mdc-option{-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;min-height:48px;padding:0 16px;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color, var(--mat-sys-on-surface));font-family:var(--mat-option-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-option-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-option-label-text-size, var(--mat-sys-body-large-size));letter-spacing:var(--mat-option-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-option-label-text-weight, var(--mat-sys-body-large-weight))}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent));outline:0}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color, var(--mat-sys-secondary-container))}.mat-mdc-option .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-option-selected-state-label-text-color, var(--mat-sys-on-secondary-container))}.mat-mdc-option.mdc-list-item{align-items:center;background:rgba(0,0,0,0)}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}@media(forced-colors: active){.mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .mat-mdc-option.mdc-list-item--selected:not(:has(.mat-mdc-option-pseudo-checkbox))::after{right:auto;left:16px}}.mat-mdc-option-multiple{--mdc-list-list-item-selected-container-color:var(--mdc-list-list-item-container-color, transparent)}.mat-mdc-option-active .mat-focus-indicator::before{content:\\\"\\\"}\"] }]\n        }], ctorParameters: () => [], propDecorators: { value: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], onSelectionChange: [{\n                type: Output\n            }], _text: [{\n                type: ViewChild,\n                args: ['text', { static: true }]\n            }] } });\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\nclass MatOptionModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup], exports: [MatOption, MatOptgroup] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptionModule, imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatOptionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n                    exports: [MatOption, MatOptgroup],\n                }]\n        }] });\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = { capture: true };\n/**\n * The events that should trigger the initialization of the ripple.\n * Note that we use `mousedown`, rather than `click`, for mouse devices because\n * we can't rely on `mouseenter` in the shadow DOM and `click` happens too late.\n */\nconst rippleInteractionEvents = ['focus', 'mousedown', 'mouseenter', 'touchstart'];\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\nclass MatRippleLoader {\n    _document = inject(DOCUMENT, { optional: true });\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, { optional: true });\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _injector = inject(Injector);\n    _hosts = new Map();\n    constructor() {\n        this._ngZone.runOutsideAngular(() => {\n            for (const event of rippleInteractionEvents) {\n                this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n            }\n        });\n    }\n    ngOnDestroy() {\n        const hosts = this._hosts.keys();\n        for (const host of hosts) {\n            this.destroyRipple(host);\n        }\n        for (const event of rippleInteractionEvents) {\n            this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n        }\n    }\n    /**\n     * Configures the ripple that will be rendered by the ripple loader.\n     *\n     * Stores the given information about how the ripple should be configured on the host\n     * element so that it can later be retrived & used when the ripple is actually created.\n     */\n    configureRipple(host, config) {\n        // Indicates that the ripple has not yet been rendered for this component.\n        host.setAttribute(matRippleUninitialized, this._globalRippleOptions?.namespace ?? '');\n        // Store the additional class name(s) that should be added to the ripple element.\n        if (config.className || !host.hasAttribute(matRippleClassName)) {\n            host.setAttribute(matRippleClassName, config.className || '');\n        }\n        // Store whether the ripple should be centered.\n        if (config.centered) {\n            host.setAttribute(matRippleCentered, '');\n        }\n        if (config.disabled) {\n            host.setAttribute(matRippleDisabled, '');\n        }\n    }\n    /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n    setDisabled(host, disabled) {\n        const ripple = this._hosts.get(host);\n        // If the ripple has already been instantiated, just disable it.\n        if (ripple) {\n            ripple.target.rippleDisabled = disabled;\n            if (!disabled && !ripple.hasSetUpEvents) {\n                ripple.hasSetUpEvents = true;\n                ripple.renderer.setupTriggerEvents(host);\n            }\n        }\n        else if (disabled) {\n            // Otherwise, set an attribute so we know what the\n            // disabled state should be when the ripple is initialized.\n            host.setAttribute(matRippleDisabled, '');\n        }\n        else {\n            host.removeAttribute(matRippleDisabled);\n        }\n    }\n    /**\n     * Handles creating and attaching component internals\n     * when a component is initially interacted with.\n     */\n    _onInteraction = (event) => {\n        const eventTarget = _getEventTarget(event);\n        if (eventTarget instanceof HTMLElement) {\n            // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n            const element = eventTarget.closest(`[${matRippleUninitialized}=\"${this._globalRippleOptions?.namespace ?? ''}\"]`);\n            if (element) {\n                this._createRipple(element);\n            }\n        }\n    };\n    /** Creates a MatRipple and appends it to the given element. */\n    _createRipple(host) {\n        if (!this._document || this._hosts.has(host)) {\n            return;\n        }\n        // Create the ripple element.\n        host.querySelector('.mat-ripple')?.remove();\n        const rippleEl = this._document.createElement('span');\n        rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName));\n        host.append(rippleEl);\n        const isNoopAnimations = this._animationMode === 'NoopAnimations';\n        const globalOptions = this._globalRippleOptions;\n        const enterDuration = isNoopAnimations\n            ? 0\n            : globalOptions?.animation?.enterDuration ?? defaultRippleAnimationConfig.enterDuration;\n        const exitDuration = isNoopAnimations\n            ? 0\n            : globalOptions?.animation?.exitDuration ?? defaultRippleAnimationConfig.exitDuration;\n        const target = {\n            rippleDisabled: isNoopAnimations || globalOptions?.disabled || host.hasAttribute(matRippleDisabled),\n            rippleConfig: {\n                centered: host.hasAttribute(matRippleCentered),\n                terminateOnPointerUp: globalOptions?.terminateOnPointerUp,\n                animation: {\n                    enterDuration,\n                    exitDuration,\n                },\n            },\n        };\n        const renderer = new RippleRenderer(target, this._ngZone, rippleEl, this._platform, this._injector);\n        const hasSetUpEvents = !target.rippleDisabled;\n        if (hasSetUpEvents) {\n            renderer.setupTriggerEvents(host);\n        }\n        this._hosts.set(host, {\n            target,\n            renderer,\n            hasSetUpEvents,\n        });\n        host.removeAttribute(matRippleUninitialized);\n    }\n    destroyRipple(host) {\n        const ripple = this._hosts.get(host);\n        if (ripple) {\n            ripple.renderer._removeTriggerEvents();\n            this._hosts.delete(host);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleLoader, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRippleLoader, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\nclass _MatInternalFormField {\n    /** Position of the label relative to the content. */\n    labelPosition;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatInternalFormField, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _MatInternalFormField, isStandalone: true, selector: \"div[mat-internal-form-field]\", inputs: { labelPosition: \"labelPosition\" }, host: { properties: { \"class.mdc-form-field--align-end\": \"labelPosition === \\\"before\\\"\" }, classAttribute: \"mdc-form-field mat-internal-form-field\" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-flex;align-items:center;vertical-align:middle}.mat-internal-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mat-internal-form-field>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end .mdc-form-field--align-end label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatInternalFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'div[mat-internal-form-field]', template: '<ng-content></ng-content>', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mdc-form-field mat-internal-form-field',\n                        '[class.mdc-form-field--align-end]': 'labelPosition === \"before\"',\n                    }, styles: [\".mat-internal-form-field{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-flex;align-items:center;vertical-align:middle}.mat-internal-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mat-internal-form-field>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end .mdc-form-field--align-end label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0}\"] }]\n        }], propDecorators: { labelPosition: [{\n                type: Input,\n                args: [{ required: true }]\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleLoader, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, RippleState, ShowOnDirtyErrorStateMatcher, VERSION, _ErrorStateTracker, _MatInternalFormField, _StructuralStylesLoader, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, provideNativeDateAdapter, setLines };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}