{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { CommentService } from './comment-service.service';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService } from './auth-service.service';\nimport { environment } from \"../../../environments/environment.development\";\n// Mock AuthService\nclass MockAuthService {\n  getRole() {\n    return 'gebruiker'; // mock role to simulate a standard user\n  }\n}\ndescribe('CommentService', () => {\n  let service;\n  let httpMock;\n  let authService;\n  const apiUrl = environment.commentApiUrl;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CommentService, {\n        provide: AuthService,\n        useClass: MockAuthService\n      }]\n    });\n    service = TestBed.inject(CommentService);\n    httpMock = TestBed.inject(HttpTestingController);\n    authService = TestBed.inject(AuthService); // Typecasting to MockAuthService\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  describe('getComments', () => {\n    it('should fetch all comments and return them', () => {\n      const mockComments = [{\n        id: '1',\n        comment: 'Comment 1',\n        author: \"rick\",\n        postId: 'post1'\n      }, {\n        id: '2',\n        comment: 'Comment 2',\n        author: \"rick\",\n        postId: 'post2'\n      }];\n      service.getComments().subscribe(comments => {\n        expect(comments.length).toBe(2);\n        expect(comments).toEqual(mockComments);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/getAllComments`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockComments);\n    });\n    it('should handle error when fetching comments fails', () => {\n      service.getComments().subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/getAllComments`);\n      req.flush('Error', {\n        status: 500,\n        statusText: 'Server Error'\n      });\n    });\n  });\n  describe('addComment', () => {\n    it('should add a comment successfully', () => {\n      const postId = 'post1';\n      const newComment = {\n        content: 'New comment',\n        author: 'John'\n      };\n      service.addComment(postId, newComment).subscribe(response => {\n        expect(response).toEqual([]);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${postId}/addComment`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(newComment);\n      req.flush([]);\n    });\n    it('should handle error when adding a comment fails', () => {\n      const postId = 'post1';\n      const newComment = {\n        content: 'New comment',\n        author: 'John'\n      };\n      service.addComment(postId, newComment).subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${postId}/addComment`);\n      req.flush('Error', {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n  describe('updateComment', () => {\n    it('should update an existing comment successfully', () => {\n      const commentId = '1';\n      const updatedComment = {\n        content: 'Updated comment'\n      };\n      service.updateComment(commentId, updatedComment).subscribe(response => {\n        expect(response.comment).toBe('Updated comment');\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/change`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.body).toEqual(updatedComment);\n      req.flush({\n        id: '1',\n        text: 'Updated comment',\n        postId: 'post1'\n      });\n    });\n    it('should handle error when updating a comment fails', () => {\n      const commentId = '1';\n      const updatedComment = {\n        content: 'Updated comment'\n      };\n      service.updateComment(commentId, updatedComment).subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/change`);\n      req.flush('Error', {\n        status: 500,\n        statusText: 'Server Error'\n      });\n    });\n  });\n  describe('deleteComment', () => {\n    it('should delete a comment successfully', () => {\n      const commentId = '1';\n      service.deleteComment(commentId).subscribe(response => {\n        expect(response).toBeUndefined();\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/deleteComment`);\n      expect(req.request.method).toBe('DELETE');\n    });\n    it('should handle error when deleting a comment fails', () => {\n      const commentId = '1';\n      service.deleteComment(commentId).subscribe({\n        next: () => fail('should have failed with an error'),\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/deleteComment`);\n      req.flush('Error', {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n});","map":{"version":3,"names":["TestBed","CommentService","HttpClientTestingModule","HttpTestingController","AuthService","environment","MockAuthService","getRole","describe","service","httpMock","authService","apiUrl","commentApiUrl","beforeEach","configureTestingModule","imports","providers","provide","useClass","inject","afterEach","verify","it","mockComments","id","comment","author","postId","getComments","subscribe","comments","expect","length","toBe","toEqual","req","expectOne","request","method","flush","next","fail","error","status","statusText","newComment","content","addComment","response","body","commentId","updatedComment","updateComment","text","deleteComment","toBeUndefined"],"sources":["C:\\School\\PXL\\2024-2025\\Fullstack Java\\Opdracht\\Code\\project-WesleyKissenPXL\\frontend-web\\src\\app\\shared\\services\\comment-service.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { CommentService } from './comment-service.service';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { AuthService } from './auth-service.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from \"../../../environments/environment.development\";\r\nimport { Comment } from '@models/comment.model';\r\nimport { CommentRequest } from '@models/commentRequest.model';\r\nimport { UpdateCommentRequest } from '@models/updateCommentRequest.model';\r\nimport { of } from 'rxjs';\r\n\r\n// Mock AuthService\r\nclass MockAuthService {\r\n  getRole() {\r\n    return 'gebruiker'; // mock role to simulate a standard user\r\n  }\r\n}\r\n\r\ndescribe('CommentService', () => {\r\n  let service: CommentService;\r\n  let httpMock: HttpTestingController;\r\n  let authService: MockAuthService;\r\n  const apiUrl = environment.commentApiUrl;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        CommentService,\r\n        { provide: AuthService, useClass: MockAuthService },\r\n      ],\r\n    });\r\n\r\n    service = TestBed.inject(CommentService);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    authService = TestBed.inject(AuthService) as any; // Typecasting to MockAuthService\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  describe('getComments', () => {\r\n    it('should fetch all comments and return them', () => {\r\n      const mockComments: Comment[] = [\r\n        { id: '1', comment: 'Comment 1', author: \"rick\", postId: 'post1' },\r\n        { id: '2', comment: 'Comment 2', author: \"rick\", postId: 'post2' },\r\n      ];\r\n\r\n      service.getComments().subscribe((comments) => {\r\n        expect(comments.length).toBe(2);\r\n        expect(comments).toEqual(mockComments);\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/getAllComments`);\r\n      expect(req.request.method).toBe('GET');\r\n      req.flush(mockComments);\r\n    });\r\n\r\n    it('should handle error when fetching comments fails', () => {\r\n      service.getComments().subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(500);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/getAllComments`);\r\n      req.flush('Error', { status: 500, statusText: 'Server Error' });\r\n    });\r\n  });\r\n\r\n  describe('addComment', () => {\r\n    it('should add a comment successfully', () => {\r\n      const postId = 'post1';\r\n      const newComment: CommentRequest = { content: 'New comment', author: 'John'};\r\n\r\n      service.addComment(postId, newComment).subscribe((response) => {\r\n        expect(response).toEqual([]);\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${postId}/addComment`);\r\n      expect(req.request.method).toBe('POST');\r\n      expect(req.request.body).toEqual(newComment);\r\n      req.flush([]);\r\n    });\r\n\r\n    it('should handle error when adding a comment fails', () => {\r\n      const postId = 'post1';\r\n      const newComment: CommentRequest = { content: 'New comment', author: 'John'};\r\n\r\n      service.addComment(postId, newComment).subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(400);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${postId}/addComment`);\r\n      req.flush('Error', { status: 400, statusText: 'Bad Request' });\r\n    });\r\n  });\r\n\r\n  describe('updateComment', () => {\r\n    it('should update an existing comment successfully', () => {\r\n      const commentId = '1';\r\n      const updatedComment: UpdateCommentRequest = { content: 'Updated comment' };\r\n\r\n      service.updateComment(commentId, updatedComment).subscribe((response) => {\r\n        expect(response.comment).toBe('Updated comment');\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/change`);\r\n      expect(req.request.method).toBe('PUT');\r\n      expect(req.request.body).toEqual(updatedComment);\r\n      req.flush({ id: '1', text: 'Updated comment', postId: 'post1' });\r\n    });\r\n\r\n    it('should handle error when updating a comment fails', () => {\r\n      const commentId = '1';\r\n      const updatedComment: UpdateCommentRequest = { content: 'Updated comment' };\r\n\r\n      service.updateComment(commentId, updatedComment).subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(500);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/change`);\r\n      req.flush('Error', { status: 500, statusText: 'Server Error' });\r\n    });\r\n  });\r\n\r\n  describe('deleteComment', () => {\r\n    it('should delete a comment successfully', () => {\r\n      const commentId = '1';\r\n\r\n      service.deleteComment(commentId).subscribe((response) => {\r\n        expect(response).toBeUndefined();\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/deleteComment`);\r\n      expect(req.request.method).toBe('DELETE');\r\n    });\r\n\r\n    it('should handle error when deleting a comment fails', () => {\r\n      const commentId = '1';\r\n\r\n      service.deleteComment(commentId).subscribe({\r\n        next: () => fail('should have failed with an error'),\r\n        error: (error) => {\r\n          expect(error.status).toBe(400);\r\n        },\r\n      });\r\n\r\n      const req = httpMock.expectOne(`${apiUrl}/${commentId}/deleteComment`);\r\n      req.flush('Error', { status: 400, statusText: 'Bad Request' });\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}